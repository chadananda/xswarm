document.addEventListener("DOMContentLoaded",()=>{function b(n){return n?n.replace(/&/g,"&amp;").replace(/'/g,"&#39;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;"):""}const A=document.querySelector(".terminal-content"),E=JSON.parse(A.getAttribute("data-scenarios")),$=JSON.parse(A.getAttribute("data-scenario-ids")),w=A.getAttribute("data-current-scenario");let C=$.indexOf(w);C===-1&&(C=0);function D(n){const o=document.querySelector(".terminal-lines"),e=n.phases.find(i=>i.type==="terminal"),r=n.phases.find(i=>i.type==="chat");if(e&&(e.items.forEach(i=>{if(i.type==="command"){const a=document.createElement("div");a.className="terminal-line",a.setAttribute("data-delay",i.delay),a.style.display="none",i.noType?a.innerHTML=`
              <span class="terminal-prompt">${i.prompt}</span>
              <span class="terminal-command">${i.text}</span>
            `:a.innerHTML=`
              <span class="terminal-prompt">${i.prompt}</span>
              <span class="terminal-command">
                <span class="typing-animation" data-text='${b(i.text)}' data-duration='${i.duration}' style="opacity: 0;"></span>
              </span>
            `,o.appendChild(a)}else if(i.type==="loading"){const a=document.createElement("div");a.className="terminal-line loading-line",a.setAttribute("data-delay",i.delay),a.innerHTML=`<span class="terminal-loading">${i.text}</span>`,o.appendChild(a)}else if(i.type==="ascii"){const a=document.createElement("div");a.className="ascii-explosion",a.setAttribute("data-delay",i.delay),i.frames.forEach((t,h)=>{const s=document.createElement("pre");s.className=`explosion-frame frame-${h+1}`,h>0&&(s.style.display="none"),s.textContent=t,a.appendChild(s)}),o.appendChild(a)}else if(i.type==="success"){const a=document.createElement("div");a.className="terminal-line success-line",a.setAttribute("data-delay",i.delay),a.innerHTML=`<span class="terminal-success">${i.text}</span>`,o.appendChild(a)}else if(i.type==="finalPrompt"){const a=document.createElement("div");a.className="terminal-line",a.setAttribute("data-delay",i.delay),a.innerHTML=`
            <span class="terminal-prompt">$</span>
            <span class="terminal-cursor-blink">_</span>
          `,o.appendChild(a)}}),r&&r.delay)){const i=document.querySelector(".chat-interface");i&&i.setAttribute("data-delay",r.delay)}}function P(n){const o=document.querySelector(".chat-interface"),e=n.phases.find(t=>t.type==="chat");if(!e)return;const r=`
        <div class="chat-stats-header">
          <div class="stats-row">
            <span class="stat-label">PROJECT:</span> <span class="stat-value">${e.stats.project}</span>
            <span class="stat-separator">|</span>
            <span class="stat-label">FILES:</span> <span class="stat-value">${e.stats.files}</span>
            <span class="stat-separator">|</span>
            <span class="stat-label">FUNCTIONS:</span> <span class="stat-value">${e.stats.functions}</span>
          </div>
          <div class="stats-row">
            <span class="stat-label">AGENTS:</span> <span class="stat-value">${e.stats.agents}</span>
            <span class="stat-separator">|</span>
            <span class="stat-label">CONTEXT:</span> <span class="stat-value">${e.stats.context}</span>
            <span class="stat-separator">|</span>
            <span class="stat-label">MODE:</span> <span class="stat-value">${e.stats.mode}</span>
          </div>
        </div>
        
        <div class="chat-scroll-container">
          <div class="chat-container">
            <div class="chat-header">
              <span class="chat-title">${e.chatTitle}</span>
              <span class="chat-status">● Connected</span>
            </div>
            <div class="chat-content-area"></div>
          </div>
        </div>
      `;o.innerHTML=r;const i=o.querySelector(".chat-content-area");let a=null;e.messages.forEach((t,h)=>{if(t.type==="agent"){if(h===0&&t.agent==="BA"&&e.welcomeMessages){const s={...t};s.text=e.welcomeMessages[Math.floor(Math.random()*e.welcomeMessages.length)];const l=N(s,n.agents[t.agent]);l.style.display="none",i.appendChild(l)}else{const s=N(t,n.agents[t.agent]);s.style.display="none",a===t.agent&&s.classList.add("same-agent"),i.appendChild(s)}a=t.agent}else if(t.type==="user"){const s=j(t);s.style.display="none",a="user",i.appendChild(s)}else if(t.type==="thinking"){const s=O(t,n.agents[t.agent]);s.style.display="none",i.appendChild(s)}else if(t.type==="agentsJoining"){const s=J(t.agents);s.style.display="none",a=null,i.appendChild(s)}else if(t.type==="multipart"){const s=F(t,n.agents[t.agent]);s.style.display="none",a===t.agent&&s.classList.add("same-agent"),a=t.agent,i.appendChild(s)}else if(t.type==="planningAnnouncement"){const s=R(t,n.agents[t.agent]);s.style.display="none",a=null,i.appendChild(s)}else if(t.type==="planningStages"){const s=B(t.stages);s.style.display="none",a=null,i.appendChild(s)}else if(t.type==="branchCreation"){const s=G(t,n.agents[t.agent]);s.style.display="none",a=null,i.appendChild(s)}else if(t.type==="dashboardLink"){const s=U(t,n.agents[t.agent]);s.style.display="none",a=null,i.appendChild(s)}else if(t.type==="progressIndicator"){const s=W(t,n.agents[t.agent]);s.style.display="none",a=null,i.appendChild(s)}})}function N(n,o){const e=document.createElement("div");return e.className="chat-message-line",e.innerHTML=`
        <span class="chat-agent-indicator ${o.class}">[${n.agent}]</span>
        <span class="chat-text typing-animation-chat" data-text='${b(n.text)}' data-duration='${n.duration}'></span>
        <span class="chat-cursor" style="display: none;"></span>
      `,e}function j(n){const o=document.createElement("div");return o.className="chat-message-line user-message",o.innerHTML=`
        <span class="chat-user-indicator">[You]</span>
        <span class="chat-text typing-animation-chat user-typing" data-text='${b(n.text)}' data-duration='${n.duration}'></span>
        <span class="chat-cursor user-cursor"></span>
      `,o}function O(n,o){const e=document.createElement("div");return e.className="chat-message-line",e.innerHTML=`
        <span class="chat-agent-indicator ${o.class}">[${n.agent}]</span>
        <span class="thinking-indicator">${n.text}</span>
      `,e}function J(n){const o=document.createElement("div");return o.className="agents-joining",n.forEach(e=>{const r=document.createElement("div");r.className="agent-join-notification",r.style.display="none",r.innerHTML=`<span class="join-indicator">→</span> <span class="agent-role">${e}</span> has joined the conversation`,o.appendChild(r)}),o}function F(n,o){const e=document.createElement("div");return e.className="chat-message-line",e.innerHTML=`
        <span class="chat-agent-indicator ${o.class}">[${n.agent}]</span>
        <span class="chat-text">
          ${n.parts.map((r,i)=>`<span class="typing-animation-chat" data-text='${b(r.text)}' data-duration='${r.duration}'${i>0?' style="display: none;"':""}></span>`).join("")}
        </span>
        <span class="chat-cursor"></span>
      `,e}function R(n,o){const e=document.createElement("div");return e.className="chat-message-line planning-announcement",e.innerHTML=`
        <span class="chat-agent-indicator ${o.class}">[${n.agent}]</span>
        <span class="chat-text typing-animation-chat" data-text='${b(n.text)}' data-duration='${n.duration}'></span>
        <span class="chat-cursor"></span>
      `,e}function B(n){const o=document.createElement("div");return o.className="planning-stages",n.forEach(e=>{const r=document.createElement("div");r.className="planning-stage-notification",r.style.display="none",r.setAttribute("data-stage-delay",e.delay),r.innerHTML=`
          <span class="stage-indicator">☐</span> 
          <span class="stage-text">${e.text}</span>
        `,o.appendChild(r)}),o}function G(n,o){const e=document.createElement("div");return e.className="chat-message-line branch-creation",e.innerHTML=`
        <span class="chat-agent-indicator ${o.class}">[${n.agent}]</span>
        <span class="chat-text">
          <span class="typing-animation-chat" data-text="Creating branch: " data-duration="0.5"></span>
          <span class="typing-animation-chat branch-name" data-text='${b(n.branchName)}' data-duration='0.5'></span>
          <span class="typing-animation-chat" data-text="..." data-duration="0.3"></span>
        </span>
        <span class="chat-cursor"></span>
      `,e}function U(n,o){const e=document.createElement("div");return e.className="chat-message-line dashboard-link",e.innerHTML=`
        <span class="chat-agent-indicator ${o.class}">[${n.agent}]</span>
        <span class="chat-text typing-animation-chat dashboard-url" data-text='${b(n.url)}' data-duration='${n.duration}'></span>
        <span class="chat-cursor"></span>
      `,e}function W(n,o){const e=document.createElement("div");return e.className="chat-message-line progress-indicator",e.innerHTML=`
        <span class="chat-agent-indicator ${o.class}">[${n.agent}]</span>
        <span class="chat-text">${n.text}<span class="progress-dots"></span></span>
      `,e}function H(n){const o=setTimeout(()=>{},0);for(let t=0;t<o;t++)clearTimeout(t);const e=setInterval(()=>{},0);for(let t=0;t<e;t++)clearInterval(t);document.querySelectorAll("[data-delay]").forEach(t=>{t.classList.contains("chat-interface")||t.remove()});const r=document.querySelector(".terminal-lines");r&&(r.innerHTML=`
          <div class="terminal-line initial-prompt">
            <span class="terminal-prompt">$</span>
            <span class="initial-cursor"></span>
          </div>
        `,r.style.display="block",r.style.opacity="1",r.style.transition="");const i=document.querySelector(".chat-interface");i&&(i.innerHTML="",i.style.display="none",i.classList.remove("active"));const a=document.querySelector(".terminal-title");a&&(a.textContent=E[n].terminalTitle),D(E[n]),P(E[n])}H($[C]),document.querySelectorAll("[data-delay]"),document.querySelector(".terminal-lines"),document.querySelector(".initial-prompt"),document.querySelectorAll(".typing-animation, .typing-animation-chat").forEach(n=>{n.textContent=""});let x=null;const X=()=>{x||(x=new(window.AudioContext||window.webkitAudioContext),window.audioContext=x)};function M(){if(!x)return;const n=x.createOscillator(),o=x.createGain();n.connect(o),o.connect(x.destination),n.frequency.value=800+Math.random()*400,o.gain.value=.02,n.start(),n.stop(x.currentTime+.01)}document.addEventListener("click",X,{once:!0});function Y(){const n=setTimeout(()=>{},0);for(let l=0;l<n;l++)clearTimeout(l);const o=setInterval(()=>{},0);for(let l=0;l<o;l++)clearInterval(l);document.querySelectorAll("[data-delay]").forEach(l=>{l.style.display="none",l.classList.remove("animate"),l.style.opacity="0";const d=l.querySelector(".typing-animation");d&&(d.classList.remove("active"),d.style.borderRight="2px solid var(--terminal-green)",d.textContent="");const c=l.querySelector(".typing-animation-chat");c&&(c.classList.remove("active"),c.classList.remove("typed"),c.textContent="")});const r=document.querySelector(".explosion-frame.frame-1"),i=document.querySelector(".explosion-frame.frame-2");r&&(r.style.display="block"),i&&(i.style.display="none");const a=document.querySelector(".initial-prompt");a&&(a.style.display="block",a.style.opacity="1");const t=document.querySelector(".terminal-lines");t&&(t.style.display="block",t.style.opacity="1",t.style.transition="");const h=document.querySelector(".chat-interface");h&&(h.classList.remove("active"),h.style.display="none",h.querySelectorAll(".typing-animation-chat").forEach(l=>{l.textContent="",l.classList.remove("typed")}));const s=document.querySelector(".branch-creation-section");if(s){s.style.display="none",s.style.opacity="0";const l=s.querySelector(".branch-status"),d=s.querySelector(".building-animation"),c=s.querySelector(".dashboard-link");l&&(l.style.display="none"),d&&(d.style.display="none"),c&&(c.style.display="none")}}function k(){Y();const n=document.querySelectorAll("[data-delay]"),o=document.querySelector(".initial-prompt");n.forEach(e=>{const r=parseInt(e.getAttribute("data-delay")||"0");setTimeout(()=>{r===2e3&&o&&(o.style.display="none"),e.style.display="block",e.style.opacity="1",e.classList.add("animate");const i=e.querySelector(".typing-animation");if(i){let a=function(){if(l<t.length){i.textContent+=t[l],window.audioContext&&M();const d=t[l],c=[".",",",":",";","!","?"].includes(d);l++,c&&l<t.length?setTimeout(a,s+300+Math.random()*200):l<t.length?setTimeout(a,s):setTimeout(()=>{i.style.borderRight="none"},200)}};const t=i.getAttribute("data-text")||"",h=i.getAttribute("data-duration")||"2.5",s=parseFloat(h)*1e3/t.length;i.style.opacity="1",i.classList.add("active"),i.textContent="";let l=0;a()}if(e.classList.contains("ascii-explosion")&&setTimeout(()=>{const a=e.querySelector(".frame-1"),t=e.querySelector(".frame-2");a&&(a.style.display="none"),t&&(t.style.display="block")},300),e.classList.contains("terminal-chat-section")&&setTimeout(()=>{const a=e.querySelector(".typing-animation-chat");a&&a.classList.add("active")},500),e.classList.contains("chat-interface")){e.classList.add("active");const a=document.querySelector(".terminal-lines");a&&(a.style.transition="opacity 0.3s ease-out",a.style.opacity="0",setTimeout(()=>{a.style.display="none"},300)),setTimeout(()=>{const t=e.querySelector(".chat-content-area"),h=t?t.querySelectorAll(".chat-message-line, .agents-joining, .planning-stages"):[];let s=0;console.log("Chat messages found:",h.length,"in",t),h.forEach((d,c)=>{d.style.display="none",d.style.opacity="0"}),setTimeout(()=>{l()},500);function l(){if(s>=h.length){setTimeout(()=>{const y=document.querySelector(".terminal-content");y&&(y.style.transition="opacity 0.5s ease-out",y.style.opacity="0",setTimeout(()=>{C=(C+1)%$.length,H($[C]),y.style.opacity="1",setTimeout(()=>{k()},100)},500))},15e3);return}const d=h[s];d.style.display="block",d.style.opacity="1";const c=e.querySelector(".chat-scroll-container")||t;c&&setTimeout(()=>{c.scrollTo({top:c.scrollHeight,behavior:"smooth"})},100);const S=d.querySelectorAll(".typing-animation-chat:not(.typed)");if(S.length>0)if(S.length>1){let y=function(){if(p<S.length){let T=function(){if(v<g.length){m.textContent+=g[v],window.audioContext&&M(),v%10===0&&c&&c.scrollTo({top:c.scrollHeight,behavior:"smooth"});const I=g[v],_=[".",",",":",";","!","?"].includes(I);v++,_&&v<g.length?setTimeout(T,q+300+Math.random()*200):v<g.length?setTimeout(T,q):(p++,setTimeout(y,300))}};const m=S[p],g=m.getAttribute("data-text")||"",L=m.getAttribute("data-duration")||"0.4",q=parseFloat(L)*1e3/g.length;m.style.display==="none"&&(m.style.display="inline"),m.classList.add("active"),m.classList.add("typed"),m.textContent="";let v=0;T()}else f&&clearInterval(f),u&&(u.style.display="none"),s++,setTimeout(l,1500)},p=0;const u=d.querySelector(".chat-cursor");u&&(u.style.display="inline-block");let f=setInterval(()=>{c&&c.scrollTo({top:c.scrollHeight,behavior:"smooth"})},200);y()}else{let y=function(){if(g<u.length){p.textContent+=u[g],window.audioContext&&M(),g%10===0&&c&&c.scrollTo({top:c.scrollHeight,behavior:"smooth"});const q=u[g],v=[".",",",":",";","!","?"].includes(q);if(g++,v&&g<u.length)setTimeout(y,T+300+Math.random()*200);else if(g<u.length)setTimeout(y,T);else{L&&clearInterval(L),m&&(m.style.display="none"),s++;const I=d.classList.contains("user-message")?2e3:1500;setTimeout(l,I)}}};const p=S[0],u=p.getAttribute("data-text")||"",f=p.getAttribute("data-duration")||"2",T=parseFloat(f)*1e3/u.length;p.classList.add("active"),p.classList.add("typed"),p.textContent="";const m=d.querySelector(".chat-cursor");m&&(m.style.display="inline-block");let g=0,L=null;c&&(L=setInterval(()=>{c.scrollTo({top:c.scrollHeight,behavior:"smooth"})},200)),y()}else if(d.querySelector(".thinking-indicator"))s++,setTimeout(l,2500);else if(d.classList.contains("agents-joining")){let y=function(){if(u<p.length){const f=p[u];f.style.display="block",f.style.opacity="1",c&&c.scrollTo({top:c.scrollHeight,behavior:"smooth"}),u++,u<p.length?setTimeout(y,800):setTimeout(()=>{s++,l()},1500)}};const p=d.querySelectorAll(".agent-join-notification");let u=0;y()}else if(d.classList.contains("planning-stages")){let y=function(){if(u<p.length){const f=p[u];f.style.display="block",f.style.opacity="1",c&&c.scrollTo({top:c.scrollHeight,behavior:"smooth"});const T=f.getAttribute("data-stage-delay")||"2500";setTimeout(()=>{const m=f.querySelector(".stage-indicator");m&&(m.textContent="☑",f.classList.add("completed")),u++,u<p.length?y():(s++,setTimeout(l,1e3))},parseInt(T))}else s++,setTimeout(l,1e3)};const p=d.querySelectorAll(".planning-stage-notification");let u=0;y()}else if(d.classList.contains("progress-indicator")){const y=d.querySelector(".progress-dots");if(y){let p=0;setInterval(()=>{p=(p+1)%4,y.textContent=".".repeat(p)},500)}s++,setTimeout(l,1e4)}else s++,setTimeout(l,1e3)}},100)}},r)})}k()});
