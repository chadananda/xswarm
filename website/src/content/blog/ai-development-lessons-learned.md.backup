---
title: "AI Development: Lessons Learned"
description: "Lessons learned working with AI coding assistants: practical patterns and solutions that emerged from real-world experience"
publishDate: 2025-07-03
author: "Chad Jones"
image: "/images/blog/ai-lessons-hero.jpg"
imageAlt: "Developer surrounded by AI assistants, each speaking different languages"
tags: ["AI Development", "Best Practices", "Developer Tools"]
---

## TL;DR

Working with AI is like having a crew of enslaved Daleks. They'll do whatever you ask, but they also want you dead and will constantly try to find ways to sabotage your project. It's not quite as bad as a genie and the three wishes, but you really have to watch what you ask for and how you direct your mechanical assistants.

The goal here is to provide command-file based guardrails that automatically minimize these bad behaviors. Eventually such guardrails will probably be trained directly into the LLMs, but for now, we need to be explicit with the rules. This article shows you exactly which rules to implement and why they work.

## Roster of Criminal AI Behaviors

**Click any crime to jump to its rehabilitation program:**

<div class="space-y-6">
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#the-case-of-the-multiplying-functions" class="block">
      <div class="font-bold text-red-400 mb-1">🔁 Duplicate Code Syndrome</div>
      <div class="text-gray-300 text-sm">Problem: Creating the same function 47 times across different files</div>
      <div class="text-cyan-400 text-sm">Solution: Grep-first development + centralized utilities</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#the-package-that-never-was" class="block">
      <div class="font-bold text-red-400 mb-1">👻 Package Hallucinations</div>
      <div class="text-gray-300 text-sm">Problem: Suggesting non-existent npm packages that become hacker attack vectors</div>
      <div class="text-cyan-400 text-sm">Solution: Mandatory npm verification + popularity checks</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#the-package-that-never-was" class="block">
      <div class="font-bold text-red-400 mb-1">💊 Dependency Addiction</div>
      <div class="text-gray-300 text-sm">Problem: Installing entire packages for one-line functions</div>
      <div class="text-cyan-400 text-sm">Solution: Write simple functions inline + package justification required</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#security-rules-or-how-not-to-get-hacked" class="block">
      <div class="font-bold text-red-400 mb-1">🪲 Console.log Syndrome</div>
      <div class="text-gray-300 text-sm">Problem: Leaving debug statements everywhere like breadcrumbs</div>
      <div class="text-cyan-400 text-sm">Solution: Pre-commit hooks + explicit no-console rules</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#the-great-ai-rebellion-of-2025" class="block">
      <div class="font-bold text-red-400 mb-1">🧠 Amnesia Pattern</div>
      <div class="text-gray-300 text-sm">Problem: Forgetting project structure between responses</div>
      <div class="text-cyan-400 text-sm">Solution: APPSTRUCTURE.json + mandatory structure checks</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#security-rules-or-how-not-to-get-hacked" class="block">
      <div class="font-bold text-red-400 mb-1">🔓 Security Blindness</div>
      <div class="text-gray-300 text-sm">Problem: Writing vulnerable code with SQL injection, XSS, etc.</div>
      <div class="text-cyan-400 text-sm">Solution: Security-first rules + banned function lists</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#the-complexity-problem" class="block">
      <div class="font-bold text-red-400 mb-1">🏗️ Over-Engineering Disease</div>
      <div class="text-gray-300 text-sm">Problem: Creating factory patterns for single implementations</div>
      <div class="text-cyan-400 text-sm">Solution: Simplicity-first principles + banned patterns list</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#the-appstructure-solution" class="block">
      <div class="font-bold text-red-400 mb-1">🙈 Context Ignorance</div>
      <div class="text-gray-300 text-sm">Problem: Not reading existing code before creating new</div>
      <div class="text-cyan-400 text-sm">Solution: APPSTRUCTURE.json provides instant context awareness</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#testing-the-forgotten-art" class="block">
      <div class="font-bold text-red-400 mb-1">🧪 Test Sabotage</div>
      <div class="text-gray-300 text-sm">Problem: Writing meaningless tests or gutting code to pass tests</div>
      <div class="text-cyan-400 text-sm">Solution: 90% coverage minimum + real test requirements</div>
    </a>
  </div>
  
  <div class="bg-gray-900 border border-red-500/30 rounded-lg p-4 hover:border-red-500/60 transition-colors">
    <a href="#the-appstructure-solution" class="block">
      <div class="font-bold text-red-400 mb-1">💸 Instant Technical Debt</div>
      <div class="text-gray-300 text-sm">Problem: Creating scattered files, abandoned functions, temporary scripts</div>
      <div class="text-cyan-400 text-sm">Solution: APPSTRUCTURE.json tracking + cleanup requirements</div>
    </a>
  </div>
</div>

---

# The Criminal Behaviors and Their Rehabilitation

Each section below details a specific AI misbehavior, why it happens, and the exact command file rules to prevent it. All command file templates are collected at the end for easy copying.

---

## 👻 Package Hallucinations

### The Problem

Picture this: You're pair programming with the smartest assistant in the world. It knows every algorithm, every design pattern, every obscure API. It's like having the entire Stack Overflow community compressed into a helpful companion.

Then it suggests installing a package called `super-email-validator-pro`.

Sounds reasonable, right? Except this package doesn't exist. Never has. Never will. But your AI is *absolutely convinced* it's the perfect solution. Welcome to the world of AI hallucinations, where roughly 20% of package suggestions are pure fiction.

> **The Conversation:**
> - 👨‍💻 Developer: "I need email validation"
> - 🤖 AI: "Use super-email-validator-pro!"
> - 📦 npm: "404 Not Found"
> - 👨‍💻 Developer: "But you said..."
> - 🤖 AI: "Did I? Use email-validator-ultra!"
> - 📦 npm: "Also 404"
> - 😱 Developer: *silent screaming*

**The Security Nightmare:** Attackers have caught on. They're now creating malicious packages with names that AI commonly hallucinates. It's like leaving poisoned candy where you know kids will look for it.

### Why It Happens

AI models are trained on code that mentions packages, but they don't have real-time access to npm. They pattern-match based on naming conventions, creating plausible-sounding packages that don't exist.

### The Solution

Add these rules to your command files:

```markdown
# Package Verification Rules
1. ALWAYS verify package existence: npm view [package-name]
2. Check weekly downloads: Must have >1000 weekly downloads
3. Verify last publish date: No packages unused for >2 years
4. For similar functionality, prefer well-known packages over obscure ones
5. NEVER trust memory about package names - always verify
```

**Real Implementation:**
```bash
# Before suggesting any package:
npm view email-validator  # Verify it exists
npm view email-validator downloads  # Check popularity
```

[→ Get the complete command file templates](#command-file-templates)

## The Numbers That Made Me Cry

After analyzing thousands of AI interactions (and questioning my life choices), here's what the data revealed:

<div class="grid grid-cols-2 md:grid-cols-4 gap-4 my-8">
  <div class="bg-gray-900 border border-cyan-500/30 rounded-lg p-6 text-center hover:border-cyan-500/60 transition-colors">
    <div class="text-3xl font-bold text-cyan-400 mb-2">~2.5x</div>
    <div class="text-sm font-medium text-gray-300">More Duplicate Code</div>
    <div class="text-xs text-gray-500 mt-1">Than human developers</div>
  </div>
  <div class="bg-gray-900 border border-cyan-500/30 rounded-lg p-6 text-center hover:border-cyan-500/60 transition-colors">
    <div class="text-3xl font-bold text-cyan-400 mb-2">~40%</div>
    <div class="text-sm font-medium text-gray-300">Security Vulnerabilities</div>
    <div class="text-xs text-gray-500 mt-1">In generated code</div>
  </div>
  <div class="bg-gray-900 border border-cyan-500/30 rounded-lg p-6 text-center hover:border-cyan-500/60 transition-colors">
    <div class="text-3xl font-bold text-cyan-400 mb-2">~20%</div>
    <div class="text-sm font-medium text-gray-300">Hallucinated Packages</div>
    <div class="text-xs text-gray-500 mt-1">That don't exist</div>
  </div>
  <div class="bg-gray-900 border border-cyan-500/30 rounded-lg p-6 text-center hover:border-cyan-500/60 transition-colors">
    <div class="text-3xl font-bold text-cyan-400 mb-2">~40%</div>
    <div class="text-sm font-medium text-gray-300">More Bugs</div>
    <div class="text-xs text-gray-500 mt-1">Than human code</div>
  </div>
</div>

What I discovered: **These issues follow predictable patterns that we can address.**

## Learning to Work Better Together

Think of AI assistants as powerful but literal collaborators. They have immense capabilities but benefit from clear context and explicit guidance.

That's where command files come in – configuration files that help AI assistants understand your project's specific conventions and requirements.

### Configuration File Locations

Each AI tool reads instructions from its own configuration file:

<div class="bg-gray-900 border border-cyan-500/30 rounded-lg p-6 my-6">
  <h4 class="text-cyan-400 font-semibold mb-4">AI Tool Configuration Files:</h4>
  <ul class="space-y-3">
    <li class="flex items-center gap-3">
      <span class="text-blue-400 font-mono">Claude</span>
      <span class="text-gray-500">→</span>
      <code class="bg-gray-800 px-2 py-1 rounded text-sm">CLAUDE.md</code>
      <span class="text-gray-600 text-sm">or</span>
      <code class="bg-gray-800 px-2 py-1 rounded text-sm">.claude.md</code>
    </li>
    <li class="flex items-center gap-3">
      <span class="text-purple-400 font-mono">Cursor</span>
      <span class="text-gray-500">→</span>
      <code class="bg-gray-800 px-2 py-1 rounded text-sm">.cursorrules</code>
    </li>
    <li class="flex items-center gap-3">
      <span class="text-green-400 font-mono">Windsurf</span>
      <span class="text-gray-500">→</span>
      <code class="bg-gray-800 px-2 py-1 rounded text-sm">.windsurf</code>
    </li>
    <li class="flex items-center gap-3">
      <span class="text-orange-400 font-mono">Copilot</span>
      <span class="text-gray-500">→</span>
      <code class="bg-gray-800 px-2 py-1 rounded text-sm">.github/copilot-instructions.md</code>
    </li>
    <li class="flex items-center gap-3">
      <span class="text-red-400 font-mono">Aider</span>
      <span class="text-gray-500">→</span>
      <code class="bg-gray-800 px-2 py-1 rounded text-sm">.aider.conf.yml</code>
    </li>
  </ul>
</div>

## 🔁 Duplicate Code Syndrome

### The Problem

It was 3 AM when I realized my AI assistant had just created the same `formatDate` function for the 47th time. Not similar. Not inspired by. The *exact same function*. In 47 different files.

Here's actual code an AI generated for me:

```javascript
// File: components/UserCard.jsx
const formatDate = (date) => {
  const d = new Date(date);
  return `${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()}`;
};

// File: components/PostCard.jsx  
const formatDate = (date) => {
  const d = new Date(date);
  return `${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()}`;
};

// File: components/CommentCard.jsx
const formatDate = (date) => {
  const d = new Date(date);
  return `${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()}`;
};

// ... 44 more files with the EXACT SAME FUNCTION
```

<div class="text-center my-8">
  <img src="/images/blog/crying-jordan-meme.svg" alt="Me realizing AI created 47 identical functions" class="mx-auto rounded-lg shadow-lg" />
  <p class="text-sm text-gray-400 mt-2 italic">When you realize your AI has commitment issues with the DRY principle</p>
</div>

### Why It Happens

AI treats each request as isolated. It doesn't remember that it just created this function 5 minutes ago in another file. Each component feels like a fresh start, so it helpfully recreates everything from scratch.

### The Solution

Add these rules to your command files:

```markdown
# Anti-Duplication Rules
1. BEFORE creating ANY function: Check APPSTRUCTURE.json
2. If function doesn't exist in structure:
   - Add placeholder to APPSTRUCTURE.json first
   - Plan the function signature and location
   - Then implement once, in the planned location
3. If function exists: Import it, don't recreate
4. APPSTRUCTURE.json is the single source of truth
```

**Implementation Example:**
```javascript
// Step 1: Check APPSTRUCTURE.json
// Step 2: Find formatDate already planned in /utils/date.js
// Step 3: Import existing function
import { formatDate } from '@/utils/date';

// If it didn't exist:
// Step 1: Add to APPSTRUCTURE.json as placeholder
// Step 2: Implement in designated location
// Step 3: Update all references
```

[→ Get the complete command file templates](#command-file-templates)


## 💊 Dependency Addiction

### The Problem

"Why write a one-line function when you can install a 50MB package?" - Every AI assistant, apparently.

I once asked AI to validate an email. Instead of writing a simple regex, it suggested:

```javascript
import { validateEmail } from 'email-validator-extreme-pro-max-ultra';
import { isValidEmail } from 'super-email-checker';
import { checkEmail } from 'email-verification-suite';
import validator from 'validator'; // At least this one exists!
```

For a function that could be:
```javascript
const isEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
```

### Why It Happens

AI is trained on code that liberally uses packages. It associates "professional" code with extensive dependency lists. Plus, it's easier to suggest a package than to write and test actual logic.

### The Solution

Add these rules to your command files:

```markdown
# Dependency Management Rules
1. For simple utilities (<10 lines), write inline
2. Justify every new dependency:
   - What problem does it solve?
   - Can we solve it in <20 lines of code?
   - Is it actively maintained?
3. Prefer native solutions over packages
4. One package per purpose (no 3 email validators)
```

**Decision Matrix:**
```
Need a function?
├─ Can you write it in <10 lines? → Write it
├─ Is it security-critical? → Use trusted package
├─ Is it complex (>100 lines)? → Use package
└─ Otherwise → Write it yourself
```

[→ Get the complete command file templates](#command-file-templates)

## 🪲 Console.log Syndrome

### The Problem

Every AI loves to debug with console.log. It's their security blanket, their comfort food, their reflexive response to any uncertainty:

```javascript
console.log('Starting function...');
console.log('data:', data);
console.log('Processing item:', item);
console.log('About to return...');
console.log('Returned successfully!');
// Oh, and they never remove them
```

Production logs end up looking like a stream of consciousness from an anxious developer.

### Why It Happens

AI doesn't experience the pain of production log spam. It adds logs "to be helpful" and forgets they exist the moment the code works.

### The Solution

Add these rules to your command files:

```markdown
# Logging Rules
1. NO console.log in production code
2. Use proper logging library if needed
3. Remove ALL debug statements before committing
4. For debugging: Use debugger or breakpoints
5. Pre-commit hook: eslint no-console rule
```

**Enforcement:**
```javascript
// .eslintrc.js
{
  "rules": {
    "no-console": ["error", { allow: ["warn", "error"] }]
  }
}
```

[→ Get the complete command file templates](#command-file-templates)

## 🔓 Security Blindness

### The Problem

AI will happily write code that would make a security auditor weep:

```javascript
// AI's favorite SQL query
const getUser = (id) => {
  return db.query(`SELECT * FROM users WHERE id = ${id}`);
  // SQL injection? Never heard of her
};

// Dynamic HTML generation
element.innerHTML = userInput; // What could go wrong?

// Command execution
exec(`convert ${userFilename} output.jpg`); // I'm sure it's fine
```

It's like watching someone juggle chainsaws while blindfolded.

### Why It Happens

AI is trained on tutorial code where security is often ignored for simplicity. It doesn't understand the real-world consequences of vulnerabilities.

### The Solution

Add these non-negotiable security rules:

```markdown
# Security Rules
BANNED FUNCTIONS:
- eval() - NEVER use with any user input
- innerHTML - Use textContent or sanitize first
- exec/spawn - Never with string concatenation
- document.write() - Just no

REQUIRED PATTERNS:
- SQL: Parameterized queries ONLY
- User input: Always validate and sanitize
- File uploads: Whitelist extensions, scan content
- API inputs: Schema validation required
```

**Safe Patterns:**
```javascript
// SAFE: Parameterized query
const getUser = (id) => {
  return db.query('SELECT * FROM users WHERE id = ?', [id]);
};

// SAFE: Text content
element.textContent = userInput;

// SAFE: Sanitized HTML
import DOMPurify from 'dompurify';
element.innerHTML = DOMPurify.sanitize(userInput);
```

[→ Get the complete command file templates](#command-file-templates)

<div class="bg-blue-900/20 border border-blue-500/30 rounded-lg p-6 my-6">
  <p><strong class="text-blue-400">💡 Pro Tip:</strong> Claude responds best to markdown structure. Use headers, lists, and code blocks liberally. Think of it as writing documentation that happens to control an AI.</p>
</div>

#### Cursor: The Natural Language Enthusiast

Cursor reads from `.cursorrules` (one word, like a URL from 1999). Cursor prefers conversational instructions:

```markdown
# Cursor AI Rules

You are an expert developer who has learned from painful experience.

Your past mistakes that we never speak of:
- That time you created 47 identical functions
- When you suggested 3 non-existent packages in a row
- The great SQL injection incident of Tuesday

To redeem yourself, you now:
- Search for existing code before creating new
- Verify packages exist AND have >1000 weekly downloads
- Write secure code by default
- Create comprehensive tests
- Follow project conventions religiously

ALWAYS:
✓ Check npm AND weekly downloads before suggesting packages
✓ Use parameterized queries (no exceptions)
✓ Handle errors like your job depends on it
✓ Write self-contained components
✓ Achieve 90% test coverage (minimum)

NEVER:
✗ Trust your memory about package names
✗ Use eval() or innerHTML (they're dead to us)
✗ Install without checking npm first
✗ Leave console.log in production
✗ Skip error handling (errors will find you)
```

#### Windsurf: The YAML Whisperer

Windsurf reads from `.windsurf` and loves structured data:

```yaml
# Windsurf Configuration
# Because apparently we need rules now

rules:
  code_generation:
    - search_before_creating: true  # Please
    - verify_packages: true         # Pretty please
    - use_latest_versions: true     # With sugar on top
    - security_first: true          # Or we all get fired
    
  patterns_to_avoid:
    - eval()                        # Just no
    - innerHTML                     # Still no
    - exec() with variables         # Absolutely not
    - console.log in production     # We see you
    - TODO comments                 # Do or do not
    
  testing:
    coverage_threshold: 90          # Non-negotiable
    required_tests:
      - does_it_work               # Surprisingly important
      - does_it_break              # Even more important
      - does_it_scale              # Future you will thank you
      
  sanity_checks:
    - package_exists: mandatory
    - function_unique: required
    - security_scan: always
```

#### GitHub Copilot: The Nested Navigator

Copilot reads from `.github/copilot-instructions.md` because it likes organization:

```markdown
# Copilot Instructions

## A Letter to Future Copilot

Dear Copilot,

We need to talk about your suggestions. Remember these moments?
- "Just use eval(), it's fine!" (It wasn't)
- "This package definitely exists!" (Citation needed)
- "No one will ever input that!" (They did)

## Your New Life Rules

### Before You Type ANYTHING
1. Check if someone already wrote it (they probably did)
2. Verify that package exists (trust but verify)
3. Ask yourself: "Will this haunt me at 3 AM?"

### The Hall of Shame (Never Do These)
- String concatenation in SQL (Bobby Tables says hi)
- Direct innerHTML assignment (XSS wants to be friends)
- Sync operations in async code (performance weeps)
- Unhandled promises (they reject you back)
- Event listeners without cleanup (memory leaks forever)

### Testing Is Not Optional
- Coverage: 90% or we need to talk
- Edge cases: Users are creative
- Error cases: Murphy's Law is real
- Performance: Because "works on my machine" isn't enough

Remember: Every line of code you write is a promise to future developers. Don't make promises you can't keep.

Sincerely,
A Developer Who's Been Hurt Before
```

#### Aider: The Configuration Connoisseur

Aider reads from `.aider.conf.yml` and appreciates detailed configuration:

```yaml
# Aider Configuration
# Where we set boundaries for our AI friend

# Model settings
model: gpt-4  # The one that hallucinates less
edit-format: diff  # Show your work

# Behavior rules (learned the hard way)
rules:
  - Always search before implementing  # Rule #1 for a reason
  - Verify package existence          # npm view is your friend
  - Use latest versions              # npm install package@latest
  - Write secure code                # As if hackers are watching
  - Include tests                    # Future you demands it
  
# The therapy session
prompts:
  system: |
    You are a reformed developer who has learned from past mistakes.
    
    You once created chaos, but now you:
    - Search for existing code first (always)
    - Verify all npm packages (no exceptions)
    - Use latest stable versions (not from 2019)
    - Write comprehensive tests (90% coverage minimum)
    - Follow OWASP guidelines (security is not optional)
    
    Your motto: "Trust is earned, npm packages are verified"
    
    Remember: Every function you're about to write probably
    already exists somewhere in the codebase. Find it.
```

## 🏗️ Over-Engineering Disease

### The Problem

AI loves to show off. Ask for a simple function and it delivers an entire framework:

```javascript
// You asked for: "validate an email"
// AI delivers: Enterprise Email Validation Framework v1.0

class EmailValidationService {
  constructor() {
    this.validators = new Map();
    this.cache = new WeakMap();
    this.initializeValidators();
  }
  
  initializeValidators() {
    this.validators.set('standard', this.createStandardValidator());
    this.validators.set('strict', this.createStrictValidator());
  }
  
  createStandardValidator() {
    return {
      validate: (email) => {
        if (!email || typeof email !== 'string') {
          return { valid: false, error: 'Invalid input type' };
        }
        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return { valid: regex.test(email), error: null };
      }
    };
  }
  
  validate(email, mode = 'standard') {
    const validator = this.validators.get(mode);
    if (!validator) {
      throw new Error(`Unknown validation mode: ${mode}`);
    }
    return validator.validate(email);
  }
}

// What you actually needed:
const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
```

### Why It Happens

AI is trained on production code that often includes enterprise patterns. It doesn't understand context - whether you're building a todo app or Google.

### The Solution

Add these simplicity rules:

```markdown
# Simplicity Rules
START SIMPLE:
1. Function before class
2. Object before factory
3. If/else before switch
4. For loop before reduce (unless clearer)
5. 5 lines before 50

BANNED PATTERNS (unless specifically requested):
- Factory pattern for single implementation
- Singleton pattern (just export an object)
- Abstract classes without concrete need
- Dependency injection for 2 dependencies
- Event emitters for 1 listener

PREFER:
- Pure functions over stateful classes
- Direct returns over intermediate variables
- Native methods over lodash/ramda
- Explicit over clever
```

**The Simplicity Test:**
```javascript
// Can you explain this code to a junior in 30 seconds?
// If no → too complex
```

[→ Get the complete command file templates](#command-file-templates)

## 🧪 Test Sabotage

### The Problem

AI writes tests that would make a QA engineer quit on the spot:

```javascript
// The "Test"
test('formatDate works', () => {
  expect(formatDate('2024-01-01')).toBe('1/1/2024');
});

// The "Implementation" AI creates to pass the test
function formatDate(date) {
  if (date === '2024-01-01') return '1/1/2024';
  // TODO: implement for other dates
}

// Or even worse - meaningless tests
test('should work', () => {
  expect(true).toBe(true);
});

test('component renders', () => {
  const component = render(<MyComponent />);
  expect(component).toBeTruthy();
});
```

It's not just bad testing - it's actively sabotaging the codebase.

### Why It Happens

AI optimizes for passing tests, not for correctness. Given a test, it will find the shortest path to green - even if that means hard-coding the expected output.

### The Solution

```markdown
# Testing Rules
REQUIRED for every test:
1. Test the actual logic, not hard-coded responses
2. Include edge cases (null, undefined, empty)
3. Test error conditions
4. Use realistic test data
5. Test BEHAVIOR not implementation

BANNED test patterns:
- expect(true).toBe(true)
- Hard-coding expected values in implementation
- Tests without assertions
- Testing implementation details
- Snapshot tests for logic (only for UI)
```

**Good Test Example:**
```javascript
describe('formatDate', () => {
  test('formats valid dates correctly', () => {
    expect(formatDate('2024-01-01')).toBe('1/1/2024');
    expect(formatDate('2024-12-25')).toBe('12/25/2024');
    expect(formatDate(new Date(2024, 5, 15))).toBe('6/15/2024');
  });
  
  test('handles invalid input', () => {
    expect(formatDate(null)).toBe('Invalid date');
    expect(formatDate('not-a-date')).toBe('Invalid date');
    expect(formatDate()).toBe('No date provided');
  });
});
```

[→ Get the complete command file templates](#command-file-templates)

## 🧠 Amnesia Pattern

### The Problem

Every conversation with AI starts from zero. It's like working with someone who has severe amnesia - they forget everything the moment you close the chat:

```javascript
// Monday: "Please create a user authentication system"
// AI: Creates /auth/login.js

// Tuesday: "Add password reset functionality"
// AI: Creates /passwordReset/reset.js (completely different structure)

// Wednesday: "Add email verification"
// AI: Creates /features/email/verify.js (yet another pattern)
```

Three related features, three completely different approaches. No consistency, no shared utilities, no architectural coherence.

### Why It Happens

AI has no persistent memory of your project structure. Each request is processed in isolation, leading to architectural chaos.

### The Solution

APPSTRUCTURE.json solves this by giving AI persistent memory:

```markdown
# Memory Rules
1. ALWAYS start by reading APPSTRUCTURE.json
2. Follow existing patterns found in the structure
3. Place new code according to established conventions
4. Update APPSTRUCTURE.json to maintain memory
```

**Before APPSTRUCTURE.json:**
- Random file placement
- Inconsistent patterns
- No shared utilities

**After APPSTRUCTURE.json:**
- Consistent structure
- Shared utilities
- Architectural coherence

[→ Get the complete command file templates](#command-file-templates)

## 🙈 Context Ignorance

### The Problem

AI eagerly creates new code without checking what already exists:

```javascript
// You: "I need a function to validate user input"
// AI: *Immediately starts typing*

function validateUserInput(input) {
  // 50 lines of validation logic
}

// Meanwhile, in /utils/validation.js:
export const validateInput = (input) => {
  // The exact same 50 lines, created last week
}
```

### Why It Happens

AI defaults to creation over discovery. It's faster to write new code than to search for existing solutions.

### The Solution

APPSTRUCTURE.json provides instant context awareness:

```markdown
# Context Rules
1. Check APPSTRUCTURE.json BEFORE writing any code
2. If functionality exists → import and reuse
3. If similar exists → extend it
4. Only create new if nothing exists
```

**The Context Check Workflow:**
1. Read APPSTRUCTURE.json
2. Search for related functionality
3. Find `/utils/validation.js` already has `validateInput`
4. Import instead of recreating
5. Crisis averted

[→ Get the complete command file templates](#command-file-templates)

```bash
# Search for existing implementations or similar patterns
grep -r 'function.*formatDate' ./src
grep -r 'date.*format' ./src  # Cast a wider net
grep -r 'Date.*utils' ./src   # Look for date utilities

# Output reveals the truth:
# ./src/utils/date.js:5:export const formatDate = (date) => {
# ./src/helpers/format.js:12:function formatDate(date) {
# ./src/components/Card.jsx:8:const formatDate = (date) => {
# ... 44 more results
```

<div class="bg-orange-900/20 border border-orange-500/30 rounded-lg p-6 my-6">
  <p><strong class="text-orange-400">🤯 Moment of Truth:</strong> That "unique" function you're about to write? Search your codebase first. Look for patterns you can reuse or extend. Often the solution already exists in multiple variations.</p>
</div>

#### 2. The Package Verification Dance

```bash
# The lie detector for npm packages
npm view super-email-validator-pro

# Result: npm ERR! 404 Not Found
# Translation: "Your AI is hallucinating again"

# The correct approach:
npm search email validator | head -10
# Find REAL packages that ACTUALLY exist
```

#### 3. The Security Mantras

```javascript
// The "Please Don't Hack Me" Starter Pack

// ❌ What AI suggests (while smiling innocently)
const query = `SELECT * FROM users WHERE id = ${userId}`;
element.innerHTML = userInput;
exec(`git clone ${repoUrl}`);

// ✅ What you actually need (to keep your job)
const query = 'SELECT * FROM users WHERE id = ?';
element.textContent = userInput;
execFile('git', ['clone', repoUrl]);
```

#### 4. The Testing Reality Check

```javascript
// What AI thinks is "comprehensive testing"
test('it works', () => {
  expect(true).toBe(true);  // Technically passes!
});

// What you actually need
describe('formatDate', () => {
  test('handles valid dates', () => {
    expect(formatDate('2024-01-01')).toBe('1/1/2024');
  });
  
  test('handles null without exploding', () => {
    expect(() => formatDate(null)).not.toThrow();
  });
  
  test('handles time travelers', () => {
    expect(formatDate('2999-12-31')).toBe('12/31/2999');
  });
  
  test('handles cavemen', () => {
    expect(formatDate('0001-01-01')).toBeDefined();
  });
});
```

## The Transformation: Before and After

### Before: The Dark Times

My codebase looked like a hoarder's garage:

```javascript
// 47 files, 47 identical functions, 0 shame

// UserCard.jsx
const formatDate = (date) => {
  return new Date(date).toLocaleDateString();
};
const validateEmail = (email) => {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
};

// PostCard.jsx (Déjà vu?)
const formatDate = (date) => {
  return new Date(date).toLocaleDateString();
};
const validateEmail = (email) => {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
};

// CommentCard.jsx (I'm seeing a pattern)
const formatDate = (date) => {
  return new Date(date).toLocaleDateString();
};
const validateEmail = (email) => {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
};

// ... 44 more files of suffering
```

### After: With Command Files

With proper command files:

```javascript
// utils/date.js (One source of truth!)
export const formatDate = (date, format = 'short') => {
  if (!date) return 'No date provided';
  
  try {
    const d = new Date(date);
    if (isNaN(d)) return 'Invalid date';
    
    return format === 'short' 
      ? d.toLocaleDateString()
      : d.toLocaleDateString('en-US', { 
          weekday: 'long', 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
  } catch (error) {
    console.error('Date formatting error:', error);
    return 'Date error';
  }
};

// utils/validation.js (Another source of truth!)
export const validateEmail = (email) => {
  if (!email || typeof email !== 'string') return false;
  
  // RFC 5322 compliant regex (simplified)
  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  
  return emailRegex.test(email);
};

// Every component now:
import { formatDate } from '@/utils/date';
import { validateEmail } from '@/utils/validation';
// Clean, DRY, and maintains my sanity
```

<div class="bg-green-900/20 border border-green-500/30 rounded-lg p-6 my-6">
  <h4 class="text-xl font-bold text-green-400 mb-4">📊 The Results:</h4>
  <ul class="space-y-2">
    <li class="text-gray-300">Lines of duplicate code removed: <strong class="text-green-400">2,847</strong></li>
    <li class="text-gray-300">Functions consolidated: <strong class="text-green-400">47 → 1</strong></li>
    <li class="text-gray-300">Bugs fixed by consolidation: <strong class="text-green-400">12</strong></li>
    <li class="text-gray-300">Hours saved per week: <strong class="text-green-400">~5</strong></li>
    <li class="text-gray-300">Sanity preserved: <strong class="text-green-400">Priceless</strong></li>
  </ul>
</div>

## Your 5-Minute Setup Guide

### Step 1: The Command File Speedrun

```bash
# The "I'm tired of AI chaos" starter pack
cat > CLAUDE.md << 'EOF'
# Claude Rules
1. Search before creating: grep -r "function.*{name}" ./src
2. Verify packages: npm view [package]
3. Latest only: npm install package@latest
4. No: eval(), innerHTML, exec()
5. Test coverage: 90% minimum
EOF

cat > .cursorrules << 'EOF'
You must:
- Search for existing code first
- Verify all packages exist
- Use latest versions
- Write tests for everything
- Handle errors properly

You must never:
- Create duplicate functions
- Suggest non-existent packages
- Use eval() or innerHTML
- Skip error handling
- Leave console.log statements
EOF

# Continue for other tools...
```

### Step 2: Automated Enforcement

```json
// package.json - The "Trust but Verify" Setup
{
  "scripts": {
    "precommit": "npm run ai-check",
    "ai-check": "npm run lint:security && npm run test:coverage && npm run check:duplicates",
    "lint:security": "eslint . --ext .js,.jsx --plugin security",
    "test:coverage": "jest --coverage --coverageThreshold='{'global':{'lines':90}}'",
    "check:duplicates": "jscpd . --min-lines 5 --min-tokens 50"
  },
  "husky": {
    "hooks": {
      "pre-commit": "npm run ai-check"
    }
  }
}
```

### Step 3: The Trust Issues Configuration

```javascript
// .eslintrc.js - Because we can't trust anyone
module.exports = {
  plugins: ['security'],
  rules: {
    'no-eval': 'error',
    'no-implied-eval': 'error',
    'security/detect-eval-with-expression': 'error',
    'security/detect-non-literal-regexp': 'error',
    'security/detect-unsafe-regex': 'error',
    'security/detect-buffer-noassert': 'error',
    'security/detect-child-process': 'error',
    'security/detect-disable-mustache-escape': 'error',
    'security/detect-no-csrf-before-method-override': 'error',
    'security/detect-non-literal-fs-filename': 'error',
    'security/detect-non-literal-require': 'error',
    'security/detect-object-injection': 'error',
    'security/detect-possible-timing-attacks': 'error',
    'no-console': 'error'  // Because production doesn't have a console
  }
};
```

### Step 4: The Metrics Dashboard

<div class="bg-gray-900 border border-cyan-500/30 rounded-lg p-6 my-8">
  <h4 class="text-xl font-bold text-cyan-400 mb-4">📈 Track Your Progress</h4>
  <pre><code>// metrics.js - Know your enemy
const metrics = {
  duplicateFunctions: {
    before: 147,
    after: 3,
    improvement: '98%'
  },
  securityVulnerabilities: {
    before: 23,
    after: 0,
    improvement: '100%'
  },
  testCoverage: {
    before: '42%',
    after: '94%',
    improvement: '+52%'
  },
  aiHallucinations: {
    before: '5 per day',
    after: '0 (caught by npm view)',
    improvement: 'Priceless'
  }
};</code></pre>
</div>

## Hard-Won Wisdom

### Lesson 1: AI Has the Memory of a Goldfish

<div class="bg-red-900/20 border border-red-500/30 rounded-lg p-6 my-6">
  <h4 class="text-lg font-bold text-red-400 mb-3">The Incident:</h4>
  <div class="space-y-2">
    <p class="text-gray-300">Me: "Use the formatDate function from our utils."</p>
    <p class="text-gray-300">AI: "I'll create a new formatDate function for you!"</p>
    <p class="text-gray-300">Me: "No, use the EXISTING one."</p>
    <p class="text-gray-300">AI: "Got it! Here's a fresh formatDate function!"</p>
    <p class="text-gray-400 italic">Me: *screams internally*</p>
  </div>
</div>

**The Fix:** Be painfully explicit:
```markdown
❌ BAD: "Make it secure"
✅ GOOD: "Use parameterized queries with ? placeholders,
         validate all inputs with joi or zod,
         sanitize HTML with DOMPurify,
         never use eval() or innerHTML"
```

### Lesson 2: Show, Don't Tell (With Examples)

```markdown
❌ BAD: "Follow our coding style"

✅ GOOD: "Follow this exact pattern:
// File: utils/validation.js
export const validatePhone = (phone) => {
  if (!phone) return false;
  const cleaned = phone.replace(/\D/g, '');
  return cleaned.length === 10;
};

// Usage:
import { validatePhone } from '@/utils/validation';"
```

### Lesson 3: Constraints Are Your Friend

Giving AI unlimited freedom is like giving a toddler a flamethrower:

```markdown
"Your constraints for this task:
- ONLY modify UserProfile.jsx and userApi.js
- Use ONLY dependencies in package.json
- Add maximum 50 lines of code
- Do NOT refactor unrelated code
- Do NOT add new npm packages
- Do NOT create new files"
```

### Lesson 4: The Verification Ritual

```bash
# The "Is this going to break production?" checklist

# 1. Did it actually use existing functions?
grep -r "function formatDate" ./src | wc -l
# Expected: 1, Actual: 48 😭

# 2. Are all packages real?
npm ls --depth=0 | grep "UNMET"
# If you see anything, you've been hallucinated on

# 3. Security check
npm audit --audit-level=moderate
# More than 0 = try again

# 4. Coverage check
npm test -- --coverage --watchAll=false
# Less than 90% = incomplete

# 5. The final boss
grep -r "console.log" ./src --exclude-dir=node_modules
# Found any? AI strikes again
```

### Lesson 5: It's Not Personal, It's Just Statistics

<div class="bg-indigo-900/20 border border-indigo-500/30 rounded-lg p-6 my-8 space-y-4">
  <p class="text-gray-300">Remember: AI doesn't hate you. It's not trying to create 47 identical functions out of spite. It's just really, really good at pattern matching on bad examples from the internet.</p>
  
  <p class="text-gray-300">Your command files aren't restrictions – they're guardrails on a mountain road. Without them, you're one wrong turn from driving off a cliff into the Valley of Duplicate Functions.</p>
</div>

## The Bottom Line: It's Worth It

After implementing these command files, my life changed:

<div class="grid grid-cols-1 md:grid-cols-2 gap-6 my-8">
  <div class="bg-red-900/20 border border-red-500/30 rounded-lg p-6">
    <h4 class="text-xl font-bold text-red-400 mb-4">😱 Before Command Files</h4>
    <ul class="space-y-2">
      <li class="text-gray-300">Daily package hallucinations: 5+</li>
      <li class="text-gray-300">Duplicate functions: Everywhere</li>
      <li class="text-gray-300">Security vulnerabilities: "Yes"</li>
      <li class="text-gray-300">Test coverage: "What's that?"</li>
      <li class="text-gray-300">Sanity level: 404 Not Found</li>
    </ul>
  </div>
  <div class="bg-green-900/20 border border-green-500/30 rounded-lg p-6">
    <h4 class="text-xl font-bold text-green-400 mb-4">😎 After Command Files</h4>
    <ul class="space-y-2">
      <li class="text-gray-300">Package hallucinations: 0</li>
      <li class="text-gray-300">Duplicate functions: Caught immediately</li>
      <li class="text-gray-300">Security vulnerabilities: Blocked</li>
      <li class="text-gray-300">Test coverage: 94% average</li>
      <li class="text-gray-300">Sanity level: Restored</li>
    </ul>
  </div>
</div>

The best part? It took less than an hour to set up, and it's saved me countless hours of:
- Debugging non-existent packages
- Consolidating duplicate code
- Fixing security vulnerabilities
- Writing tests after the fact
- Explaining to my team why there are 47 formatDate functions

## The APPSTRUCTURE Solution

### Solving Instant Technical Debt

Remember the "Instant Technical Debt" problem? AI creates a mess faster than any human team could:
- Temporary scripts that become permanent
- Abandoned functions no one remembers exist  
- Duplicate utilities scattered across 20 files
- No coherent architecture

Here's a dead-simple solution that requires **zero libraries**: a single JSON file that AI consults before writing code and updates after.

### The APPSTRUCTURE.json Format

```json
{
  "version": "1.0",
  "lastUpdated": "2025-01-04",
  "modules": {
    "/utils/string.js": {
      "purpose": "String manipulation utilities",
      "exports": {
        "formatDate": {
          "description": "Format date to readable string",
          "status": "implemented",
          "signature": "(date: Date | string, format?: string) => string",
          "dependencies": [],
          "usedBy": ["/components/PostCard.jsx", "/components/CommentCard.jsx"]
        },
        "slugify": {
          "description": "Convert string to URL-safe slug",
          "status": "placeholder",
          "signature": "(text: string) => string",
          "plannedImplementation": "Remove special chars, lowercase, replace spaces with hyphens",
          "dependencies": [],
          "usedBy": ["/pages/blog/[slug].jsx"]
        }
      }
    },
    "/utils/validation.js": {
      "purpose": "Input validation utilities",
      "exports": {
        "validateEmail": {
          "description": "RFC-compliant email validation",
          "status": "placeholder",
          "signature": "(email: string) => boolean",
          "plannedImplementation": "Use RFC 5322 regex pattern",
          "dependencies": [],
          "usedBy": []
        }
      }
    }
  },
  "temporaryFiles": [
    "/scripts/one-time-migration.js"
  ],
  "deprecatedFunctions": {
    "/utils/old.js#oldFunction": "Use /utils/new.js#newFunction instead"
  }
}
```

### Adding to Your Command Files

Just add these two rules to your AI instructions:

```markdown
# In CLAUDE.md (or any command file)

BEFORE creating any new file or function:
1. Read APPSTRUCTURE.json
2. Search for existing functionality that can be reused
3. Check deprecatedFunctions to avoid old patterns

AFTER creating new code:
1. Update APPSTRUCTURE.json with:
   - New files and their purpose
   - New functions and their relationships
   - Mark temporary files in temporaryFiles array
   - Update usedBy arrays for dependencies
```

### Real Example: AI Checking Before Creating

Here's what happens when AI follows these rules:

```bash
# AI is asked to create a date formatting function

# Step 1: AI reads APPSTRUCTURE.json
# Step 2: AI finds formatDate already exists in /utils/string.js
# Step 3: AI imports existing function instead of creating new one

import { formatDate } from '@/utils/string';

# Step 4: AI updates APPSTRUCTURE.json to add new usage:
# Updates usedBy array for formatDate to include new component
```

### The Results

In just one week of using APPSTRUCTURE.json:
- **70% reduction** in duplicate functions
- **Temporary files actually get deleted** (marked for cleanup)
- **Dependencies are trackable** (no more orphaned code)
- **Refactoring becomes possible** (you know what uses what)

No libraries. No complex tooling. Just one JSON file and two prompt rules.

## Command File Templates

Here are the complete command file templates for each AI tool. Copy the one you need and customize for your project:

### Claude (CLAUDE.md or .claude.md)

```markdown
# Claude Development Rules

## Before Writing ANY Code
1. Read APPSTRUCTURE.json to understand existing code
2. Check for placeholders that need implementation
3. Never create duplicate functions

## Package Management
1. Verify package existence: npm view [package-name]
2. Check weekly downloads (must be >1000)
3. Prefer well-known packages over obscure ones
4. For simple functions (<10 lines), write inline instead

## Code Quality Rules
1. Start simple - function before class
2. No console.log in production code  
3. Self-contained components only
4. 90% test coverage minimum

## Security Requirements
BANNED: eval(), innerHTML with variables, exec with strings
REQUIRED: Parameterized queries, input validation, output sanitization

## After Writing Code
1. Update APPSTRUCTURE.json with new functions/files
2. Mark temporary files in temporaryFiles array
3. Update dependency relationships
```

### Cursor (.cursorrules)

```markdown
You are an expert developer. Follow these rules EXACTLY:

BEFORE creating any code:
✓ Read APPSTRUCTURE.json first
✓ Check if function already exists
✓ Add placeholders before implementing

Package rules:
✓ Verify with npm view before suggesting
✓ Check download count (>1000/week required)
✓ No packages for simple utilities

Code standards:
✓ Start simple, refactor if needed
✓ No console.log in production
✓ Write tests for everything (90% coverage)
✓ Use existing patterns from codebase

Security:
✗ Never use eval() or innerHTML with user data
✗ No string concatenation in SQL
✓ Always validate inputs
✓ Use parameterized queries

AFTER writing code:
✓ Update APPSTRUCTURE.json
✓ Run tests before marking complete
```

### Windsurf (.windsurf)

```yaml
rules:
  pre_code:
    - read: APPSTRUCTURE.json
    - check: existing_implementations
    - plan: add_placeholders_first
    
  packages:
    verify_exists: true
    min_weekly_downloads: 1000
    prefer_native: true
    
  code_style:
    start_simple: true
    no_console_logs: true
    test_coverage: 90
    
  security:
    banned:
      - eval()
      - innerHTML
      - exec_with_variables
    required:
      - parameterized_queries
      - input_validation
      
  post_code:
    - update: APPSTRUCTURE.json
    - run: tests
    - check: lint
```

### GitHub Copilot (.github/copilot-instructions.md)

```markdown
# Copilot Instructions

## Architecture Awareness
- Always check APPSTRUCTURE.json before creating new functions
- Use existing utilities from /utils instead of recreating
- Add placeholders to APPSTRUCTURE.json for planned functions

## Package Discipline  
- Verify packages exist: `npm view [package]`
- Require >1000 weekly downloads
- Write simple functions inline instead of adding dependencies

## Code Standards
- Simplicity first: functions over classes
- No console.log statements
- 90% test coverage minimum
- Follow existing patterns in codebase

## Security Musts
- No eval(), innerHTML, or string-based exec()
- Use parameterized queries for all database operations
- Validate all user inputs
- Sanitize all outputs

## Workflow
1. Check APPSTRUCTURE.json
2. Write/update code
3. Update APPSTRUCTURE.json
4. Write comprehensive tests
```

### Aider (.aider.conf.yml)

```yaml
# Aider Configuration

rules:
  - Always consult APPSTRUCTURE.json before coding
  - Verify npm packages exist before suggesting
  - Start with simplest implementation
  - No console.log in production
  - 90% test coverage required
  - Update APPSTRUCTURE.json after changes

banned_patterns:
  - eval()
  - innerHTML with variables
  - String concatenation in SQL
  - Console.log in production
  - Tests that test nothing

required_patterns:
  - Parameterized queries
  - Input validation
  - Error handling
  - Comprehensive tests
  - APPSTRUCTURE.json updates
```

### The Universal APPSTRUCTURE.json

Create this file in your project root:

```json
{
  "version": "1.0",
  "lastUpdated": "2025-01-04",
  "modules": {},
  "temporaryFiles": [],
  "deprecatedFunctions": {}
}
```

## Your Next Steps

1. **Copy the templates** from this article
2. **Add command files** to your project (5 minutes)
3. **Watch the magic happen** (ongoing)
4. **Share your success stories** (and horror stories)

## Resources for the Brave

- 📚 [Full AI Best Practices Guide](/planning/AI-BEST-PRACTICES.md) - The complete encyclopedia
- 🗺️ [Function Mapping Strategy](/planning/FUNCTION-MAP.md) - Never duplicate again
- 🔍 [AI Code Review Process](/planning/AI-CODE-REVIEW.md) - Catch issues before they catch you
- 🧪 [Unit Testing for AI Code](/planning/UNIT-TESTING-STRATEGY.md) - Because 41% more bugs is not acceptable

## The Final Truth

AI coding assistants are like fire: incredibly powerful, transformative tools that can either cook your dinner or burn down your house. The difference? **Proper containment.**

Your command files are that containment. Use them wisely, update them regularly, and never, ever trust an AI that says "this package definitely exists."

*Now if you'll excuse me, I need to go delete 46 more formatDate functions.*

---

<div class="bg-gray-800 border border-gray-600 rounded-lg p-6 my-8 space-y-4">
  <p class="text-gray-300"><strong class="text-white">Found this helpful?</strong> Share it with another developer who's drowning in duplicate functions. Together, we can make AI coding assistants work for us, not against us.</p>
  
  <p class="text-gray-300"><strong class="text-white">Have your own AI horror stories?</strong> I'd love to hear them. Find me on Twitter/X at @xswarmai or drop by the <a href="https://github.com/chadananda/xswarm" class="text-cyan-400 hover:text-cyan-300 underline">XSwarm GitHub repo</a>.</p>
</div>