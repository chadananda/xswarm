---
import Layout from './Layout.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import readingTime from 'reading-time';
import { getCollection } from 'astro:content';
import '../styles/blog-typography.css';
import '../styles/blog-header.css';
import '../styles/blog-visuals.css';
import '../styles/blog-manifesto.css';
import '../styles/blog-scrollbar.css';
import '../styles/blog-share.css';
import '../styles/blog-metadata.css';
import '../styles/mermaid.css';
import '../styles/blog-sandboxed-integration.css';
import '../styles/blog-sequential-hell.css';
import '../styles/blog-ai-function-graveyard.css';
import '../styles/blog-marketing-during-dev.css';
import '../styles/blog-expensive-ai-intern.css';

export interface Props {
  title: string;
  description: string;
  publishDate: Date;
  author: string;
  image?: string;
  imageAlt?: string;
  tags?: string[];
  content: string;
}

const { title, description, publishDate, author, image, imageAlt, tags = [], content } = Astro.props;
const stats = readingTime(content);

const formattedDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}).format(publishDate);

// Get related articles based on shared tags
const allPosts = await getCollection('blog');
const relatedPosts = allPosts
  .filter(post => 
    post.data.title !== title && // Exclude current post
    post.data.tags?.some(tag => tags.includes(tag)) // Has at least one shared tag
  )
  .sort((a, b) => {
    // Sort by number of shared tags
    const aSharedTags = a.data.tags?.filter(tag => tags.includes(tag)).length || 0;
    const bSharedTags = b.data.tags?.filter(tag => tags.includes(tag)).length || 0;
    return bSharedTags - aSharedTags;
  })
  .slice(0, 5); // Limit to 5 related posts
---

<Layout title={`${title} - xSwarm.ai Blog`} description={description}>
  <Navbar />
  
  <main>
    <!-- Hero Image First -->
    {image && (
      <div class="blog-hero-image-top">
        <img
          src={image}
          alt={imageAlt || title}
        />
      </div>
    )}
    
    <!-- Hero Section -->
    <div class="blog-hero">
      <div class="container mx-auto px-4 max-w-4xl">
        <h1 class="blog-title" data-text={title}>
          {title}
        </h1>
        
        <p class="blog-description">
          {description}
        </p>

        {tags.length > 0 && (
          <div class="blog-tags">
            {tags.map((tag) => (
              <span class="blog-tag">
                {tag}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
    
    <div class="container mx-auto px-4 max-w-7xl py-12">
      <div class="lg:grid lg:grid-cols-12 lg:gap-8">
        <!-- Main Article Content -->
        <article class="lg:col-span-8">
          <!-- Blog Metadata -->
          <div class="blog-meta-article">
            <time class="blog-date" datetime={publishDate.toISOString()}>{formattedDate}</time>
            <span class="blog-author">{author}</span>
            <span class="blog-reading-time">{stats.text}</span>
          </div>

          <!-- Article Content -->
          <div class="blog-article">
            <slot />
          </div>

          <!-- Author Bio -->
          <div class="mt-16 pt-8 border-t border-border">
            <div class="flex items-start space-x-4">
              <img
                src="/xswarm.png"
                alt={author}
                class="w-16 h-16 rounded-full"
              />
              <div>
                <h3 class="font-semibold text-primary">{author}</h3>
                <p class="text-tertiary mt-1">
                  Creator of xSwarm.ai, empowering developers to transform into a Team of One with AI-powered development coordination.
                </p>
                <div class="flex space-x-4 mt-3">
                  <a
                    href="https://github.com/chadananda"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-tertiary hover:text-link transition-colors"
                  >
                    GitHub
                  </a>
                  <a
                    href="https://twitter.com/xswarmai"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-tertiary hover:text-link transition-colors"
                  >
                    Twitter
                  </a>
                </div>
              </div>
            </div>
          </div>

          <!-- Share Section -->
          <div class="cyberpunk-share-section">
            <div class="share-glitch-container">
              <h3 class="share-title" data-text="BROADCAST THIS SIGNAL">BROADCAST THIS SIGNAL</h3>
            </div>
            <div class="share-buttons-grid">
              <a
                href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(Astro.url.href)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="share-button twitter-share"
              >
                <span class="share-icon">
                  <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                    <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                  </svg>
                </span>
                <span class="share-label">X / Twitter</span>
                <span class="share-effect"></span>
              </a>
              <a
                href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(Astro.url.href)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="share-button linkedin-share"
              >
                <span class="share-icon">
                  <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
              </span>
              <span class="share-label">LinkedIn</span>
              <span class="share-effect"></span>
            </a>
            <button
              onclick="navigator.clipboard.writeText(window.location.href).then(() => { 
                this.classList.add('copied'); 
                setTimeout(() => this.classList.remove('copied'), 2000); 
              })"
              class="share-button copy-share"
            >
              <span class="share-icon">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" width="20" height="20">
                  <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                  <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                </svg>
              </span>
              <span class="share-label">Copy Link</span>
              <span class="share-effect"></span>
            </button>
          </div>
          </div>
        </article>

        <!-- Related Articles Sidebar -->
        <aside class="hidden lg:block lg:col-span-4">
          {relatedPosts.length > 0 && (
            <div class="sticky top-24">
              <h3 class="text-xl font-bold text-cyan-400 mb-6">Related Articles</h3>
              <div class="space-y-6">
                {relatedPosts.map((post) => (
                  <a 
                    href={`/blog/${post.slug}`} 
                    class="block group"
                  >
                    <article class="p-4 bg-gray-900/50 border border-gray-800 rounded-lg hover:border-cyan-500/50 transition-all duration-300">
                      {post.data.image && (
                        <div class="mb-3 overflow-hidden rounded-lg">
                          <img 
                            src={post.data.image} 
                            alt={post.data.imageAlt || post.data.title}
                            class="w-full h-32 object-cover group-hover:scale-105 transition-transform duration-300"
                          />
                        </div>
                      )}
                      <h4 class="font-semibold text-gray-100 group-hover:text-cyan-400 transition-colors mb-2 line-clamp-2">
                        {post.data.title}
                      </h4>
                      <p class="text-sm text-gray-400 line-clamp-3 mb-3">
                        {post.data.description}
                      </p>
                      <div class="flex flex-wrap gap-2">
                        {post.data.tags?.filter(tag => tags.includes(tag)).map((tag) => (
                          <span class="text-xs px-2 py-1 bg-cyan-900/30 text-cyan-400 rounded-full border border-cyan-500/30">
                            {tag}
                          </span>
                        ))}
                      </div>
                    </article>
                  </a>
                ))}
              </div>
            </div>
          )}
        </aside>
      </div>
    </div>
  </main>
  
  <Footer />
</Layout>

<script>
  import mermaid from 'mermaid';
  
  // Initialize mermaid with cyberpunk theme
  mermaid.initialize({ 
    startOnLoad: false,
    theme: 'dark',
    themeVariables: {
      primaryColor: '#3B82F6',
      primaryTextColor: '#0ff',
      primaryBorderColor: '#0ff',
      lineColor: '#0ff',
      secondaryColor: '#8B5CF6',
      tertiaryColor: '#6366F1',
      background: '#030712',
      mainBkg: '#030712',
      secondBkg: '#0a0a0a',
      tertiaryBkg: '#111827',
      secondaryBorderColor: '#f0f',
      tertiaryBorderColor: '#ff0',
      secondaryTextColor: '#f0f',
      tertiaryTextColor: '#ff0',
      textColor: '#fff',
      titleColor: '#0ff',
      arrowheadColor: '#0ff',
      edgeLabelBackground: '#030712',
      clusterBkg: '#111827',
      clusterBorder: '#0ff',
      defaultLinkColor: '#0ff',
      fontFamily: 'JetBrains Mono, monospace',
      fontSize: '20px',
      nodeTextSize: '20px',
      edgeLabelSize: '18px',
    },
    securityLevel: 'loose',
    flowchart: {
      htmlLabels: true,
      curve: 'basis'
    }
  });
  
  // Find all mermaid code blocks and render them
  document.addEventListener('DOMContentLoaded', () => {
    // Look for Shiki-processed mermaid blocks
    const codeBlocks = document.querySelectorAll('pre.astro-code[data-language="mermaid"]');
    
    codeBlocks.forEach((pre, index) => {
      const code = pre.querySelector('code');
      if (code) {
        const container = document.createElement('div');
        container.className = 'mermaid-container';
        const mermaidDiv = document.createElement('div');
        mermaidDiv.className = 'mermaid';
        mermaidDiv.id = `mermaid-${index}`;
        
        // Clean up the mermaid code
        let mermaidCode = code.textContent.trim();
        
        // Fix common issues with node IDs containing brackets
        mermaidCode = mermaidCode.replace(/\[([^\]]+)\]/g, (match, content) => {
          // Keep node labels but ensure IDs are clean
          return `["${content}"]`;
        });
        
        mermaidDiv.textContent = mermaidCode;
        container.appendChild(mermaidDiv);
        
        // Add error handling
        try {
          pre.parentNode.replaceChild(container, pre);
        } catch (error) {
          console.error('Mermaid diagram error:', error);
          container.innerHTML = `<div class="mermaid-error">Unable to render diagram: ${error.message}</div>`;
          pre.parentNode.replaceChild(container, pre);
        }
      }
    });
    
    // Run mermaid with error handling
    try {
      mermaid.run();
    } catch (error) {
      console.error('Mermaid initialization error:', error);
    }
  });
</script>

<style>
  @import '../styles/blog-visuals.css';
  /* Prose customizations */
  .prose {
    --tw-prose-body: theme('colors.gray.700');
    --tw-prose-headings: theme('colors.gray.900');
    --tw-prose-links: theme('colors.blue.600');
    --tw-prose-bold: theme('colors.gray.900');
    --tw-prose-code: theme('colors.gray.900');
    --tw-prose-pre-bg: theme('colors.gray.100');
    --tw-prose-pre-code: theme('colors.gray.900');
  }
  
  .dark .prose {
    --tw-prose-body: theme('colors.gray.300');
    --tw-prose-headings: theme('colors.white');
    --tw-prose-links: theme('colors.blue.400');
    --tw-prose-bold: theme('colors.white');
    --tw-prose-code: theme('colors.gray.100');
    --tw-prose-pre-bg: theme('colors.gray.800');
    --tw-prose-pre-code: theme('colors.gray.100');
  }
  
  .prose :where(code):not(:where([class~="not-prose"] *)) {
    background-color: theme('colors.gray.100');
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-weight: 400;
  }
  
  .dark .prose :where(code):not(:where([class~="not-prose"] *)) {
    background-color: theme('colors.gray.800');
  }
  
  .prose :where(pre):not(:where([class~="not-prose"] *)) {
    background-color: theme('colors.gray.900');
    color: theme('colors.gray.100');
  }
  
  .dark .prose :where(pre):not(:where([class~="not-prose"] *)) {
    background-color: theme('colors.gray.950');
  }

  /* Line clamp utilities */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Fix for code blocks in terminal windows */
  .code-example pre,
  .prose pre[class*="astro-code"] {
    max-height: none !important;
    overflow: auto !important;
  }
  
  /* Ensure code content is visible */
  .code-example pre code,
  .prose pre[class*="astro-code"] code {
    display: block;
    white-space: pre;
    overflow-x: auto;
    padding: 1rem;
  }
  
  /* Terminal window code block fix */
  pre.astro-code {
    min-height: auto !important;
    max-height: 600px !important;
    overflow-y: auto !important;
    overflow-x: auto !important;
  }
</style>