---
export interface Props {
  traditional: {
    title: string;
    conversation: Array<{
      speaker: 'human' | 'ai';
      text: string;
    }>;
    tokenSteps: Array<{
      tokens: string;
      action: string;
      type: 'context' | 'understanding' | 'questions' | 'generation' | 'explanation';
    }>;
    total: {
      tokens: string;
      subtitle: string;
    };
  };
  xswarm: {
    title: string;
    conversation: Array<{
      speaker: 'human' | 'ai';
      text: string;
    }>;
    tokenSteps: Array<{
      tokens: string;
      action: string;
      type: 'context' | 'adaptation';
    }>;
    total: {
      tokens: string;
      subtitle: string;
    };
  };
}

const { traditional, xswarm } = Astro.props;

const typeColors = {
  context: 'border-l-red-500',
  understanding: 'border-l-amber-500',
  questions: 'border-l-purple-500',
  generation: 'border-l-cyan-500',
  explanation: 'border-l-green-500',
  adaptation: 'border-l-cyan-500'
};
---

<div class="grid md:grid-cols-2 gap-8 my-12">
  <!-- Traditional Approach -->
  <div class="p-6 bg-gray-800/50 rounded-xl border border-red-500/30">
    <h4 class="mb-4 text-xl text-center font-['Orbitron'] font-semibold">{traditional.title}</h4>
    
    <!-- Conversation -->
    <div class="mb-6 p-4 bg-black/30 rounded-lg">
      {traditional.conversation.map((msg) => (
        <div class={`my-2 p-2 rounded text-sm font-mono ${
          msg.speaker === 'human' 
            ? 'bg-purple-500/10 text-gray-200' 
            : 'bg-cyan-500/10 text-cyan-400'
        }`}>
          <span class="font-semibold">{msg.speaker === 'human' ? 'Human' : 'AI'}:</span> {msg.text}
        </div>
      ))}
    </div>
    
    <!-- Token Waterfall -->
    <div class="space-y-2 mb-4">
      {traditional.tokenSteps.map((step) => (
        <div class={`flex justify-between items-center p-2 bg-black/20 rounded text-sm border-l-4 ${typeColors[step.type]}`}>
          <span class="font-semibold text-pink-400 font-mono">{step.tokens}</span>
          <span class="text-gray-300">{step.action}</span>
        </div>
      ))}
    </div>
    
    <!-- Total -->
    <div class="p-4 bg-black/50 rounded-lg text-center">
      <span class="block text-2xl font-bold text-pink-400 font-['Orbitron'] mb-1">
        {traditional.total.tokens}
      </span>
      <span class="text-sm text-gray-400 italic">{traditional.total.subtitle}</span>
    </div>
  </div>
  
  <!-- XSwarm Approach -->
  <div class="p-6 bg-gray-800/50 rounded-xl border border-green-500/30">
    <h4 class="mb-4 text-xl text-center font-['Orbitron'] font-semibold">{xswarm.title}</h4>
    
    <!-- Conversation -->
    <div class="mb-6 p-4 bg-black/30 rounded-lg">
      {xswarm.conversation.map((msg) => (
        <div class={`my-2 p-2 rounded text-sm font-mono ${
          msg.speaker === 'human' 
            ? 'bg-purple-500/10 text-gray-200' 
            : 'bg-cyan-500/10 text-cyan-400'
        }`}>
          <span class="font-semibold">{msg.speaker === 'human' ? 'Human' : 'AI'}:</span> {msg.text}
        </div>
      ))}
    </div>
    
    <!-- Token Waterfall -->
    <div class="space-y-2 mb-4">
      {xswarm.tokenSteps.map((step) => (
        <div class={`flex justify-between items-center p-2 bg-black/20 rounded text-sm border-l-4 ${typeColors[step.type]}`}>
          <span class="font-semibold text-cyan-400 font-mono">{step.tokens}</span>
          <span class="text-gray-300">{step.action}</span>
        </div>
      ))}
    </div>
    
    <!-- Total -->
    <div class="p-4 bg-black/50 rounded-lg text-center">
      <span class="block text-2xl font-bold text-cyan-400 font-['Orbitron'] mb-1">
        {xswarm.total.tokens}
      </span>
      <span class="text-sm text-gray-400 italic">{xswarm.total.subtitle}</span>
    </div>
  </div>
</div>