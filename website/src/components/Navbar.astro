---
const navItems = [
  { name: 'Home', href: '/' },
  { name: 'Blog', href: '/blog' },
  { name: 'About', href: '/about' },
  { name: 'Roadmap', href: '/roadmap' },
  { name: 'Documentation', href: '/docs' },
];
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-backdrop backdrop-blur-lg border-b border">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2">
        <img src="/xswarm.png" alt="XSwarm" class="h-8 w-8" />
        <span class="text-xl font-bold bg-gradient-to-r from-brand-primary to-brand-secondary bg-clip-text text-transparent">
          XSwarm.ai
        </span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="text-secondary hover:text-link transition-colors font-medium"
            target={item.href.startsWith('http') ? '_blank' : undefined}
            rel={item.href.startsWith('http') ? 'noopener noreferrer' : undefined}
          >
            {item.name}
          </a>
        ))}
        
        <!-- GitHub Link -->
        <a
          href="https://github.com/chadananda/xswarm"
          target="_blank"
          rel="noopener noreferrer"
          class="text-secondary hover:text-link transition-colors"
          aria-label="GitHub"
        >
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
            <path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd" />
          </svg>
        </a>

        <!-- Theme Toggle -->
        <button
          id="theme-toggle"
          class="p-2 rounded-lg bg-surface text-secondary hover:bg-surface-hover transition-colors"
          aria-label="Toggle theme"
        >
          <svg class="h-5 w-5 sun-icon" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
          </svg>
          <svg class="h-5 w-5 moon-icon" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
          </svg>
        </button>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-toggle"
        class="md:hidden p-2 rounded-lg text-secondary hover:bg-surface transition-colors"
        aria-label="Toggle mobile menu"
      >
        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="hidden md:hidden border-t border">
      <div class="py-4 space-y-2">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="block px-4 py-2 text-secondary hover:bg-surface transition-colors font-medium"
            target={item.href.startsWith('http') ? '_blank' : undefined}
            rel={item.href.startsWith('http') ? 'noopener noreferrer' : undefined}
          >
            {item.name}
          </a>
        ))}
        <a
          href="https://github.com/chadananda/xswarm"
          target="_blank"
          rel="noopener noreferrer"
          class="block px-4 py-2 text-secondary hover:bg-surface transition-colors font-medium"
        >
          GitHub
        </a>
      </div>
    </div>
  </div>
</nav>

<style>
  /* Theme toggle icon visibility */
  [data-theme="light"] .moon-icon,
  :root:not([data-theme]) .moon-icon {
    display: none;
  }
  
  [data-theme="dark"] .sun-icon {
    display: none;
  }
  
  [data-theme="light"] .sun-icon,
  :root:not([data-theme]) .sun-icon {
    display: block;
  }
  
  [data-theme="dark"] .moon-icon {
    display: block;
  }
</style>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');

  // Check for saved theme preference or default to system preference
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return 'auto'; // Let the browser decide based on system preference
  })();

  // Apply theme
  if (theme === 'dark') {
    document.documentElement.setAttribute('data-theme', 'dark');
  } else if (theme === 'light') {
    document.documentElement.setAttribute('data-theme', 'light');
  }
  // If 'auto', don't set data-theme and let CSS handle it

  if (themeToggle) {
    themeToggle.addEventListener('click', () => {
      const currentTheme = document.documentElement.getAttribute('data-theme');
      let newTheme;
      
      if (currentTheme === 'dark') {
        newTheme = 'light';
      } else if (currentTheme === 'light') {
        newTheme = 'auto';
      } else {
        // Currently auto, switch to dark
        newTheme = 'dark';
      }
      
      if (newTheme === 'auto') {
        document.documentElement.removeAttribute('data-theme');
        localStorage.removeItem('theme');
      } else {
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
      }
    });
  }

  // Mobile menu toggle
  if (mobileMenuToggle && mobileMenu) {
    mobileMenuToggle.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
    });
  }
</script>