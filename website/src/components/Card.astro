---
export interface Props {
  icon?: string;
  title: string;
  role?: string;
  description?: string;
  image?: string;
  class?: string;
  hover?: boolean;
  variant?: 'default' | 'compact' | 'tiny';
  mcpTools?: string[];
  prompt?: string;
}

const { 
  icon, 
  title, 
  role, 
  description, 
  image, 
  class: className = '', 
  hover = true, 
  variant = 'default',
  mcpTools = [], 
  prompt 
} = Astro.props;

// Size configurations based on variant
const sizes = {
  default: { width: 'w-[200px]', height: 'h-[260px]', imageHeight: 'h-[140px]' },
  compact: { width: 'w-[200px]', height: 'h-[260px]', imageHeight: 'h-[100px]' },
  tiny: { width: 'w-auto', height: 'h-auto', imageHeight: '' }
};

const currentSize = sizes[variant];
---

{variant === 'tiny' ? (
  <!-- Tiny variant - simple inline card -->
  <div class={`tiny-card ${className}`}>
    <div class="tiny-card-content">
      {icon && (
        <span class="tiny-card-icon">{icon}</span>
      )}
      <div class="tiny-card-text">
        <h4 class="tiny-card-title">{title}</h4>
        {role && (
          <p class="tiny-card-role">({role})</p>
        )}
      </div>
    </div>
  </div>
) : (
  <!-- Default and compact variants -->
  <div class={`relative inline-block ${currentSize.width} ${currentSize.height} group`}>
    <div class={`
      card-container
      ${hover ? 'card-hover' : ''}
      ${variant === 'compact' ? 'card-compact' : ''}
      ${className}
    `}>
      <!-- Character image background -->
      {image && (
        <div class={`character-image absolute inset-0 ${currentSize.imageHeight}`}>
          <img src={image} alt={title} class="w-full h-full object-cover object-top" />
          <div class="absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-gray-900/95" />
        </div>
      )}
      
      <!-- Decorative corners -->
      <div class="card-corners">
        <div class="corner-tl"></div>
        <div class="corner-tr"></div>
      </div>
      
      <!-- Main content -->
      <div class="relative h-full flex flex-col">
        <!-- Image section or icon -->
        <div class={`image-section relative ${currentSize.imageHeight} flex-shrink-0 border-b-2 border-terminal-cyan/30`}>
          {!image && (
            <div class="flex items-center justify-center h-full bg-gradient-to-b from-terminal-bg/50 to-terminal-bg">
              <div class={`${variant === 'compact' ? 'text-4xl' : 'text-6xl'} text-terminal-cyan/20 animate-pulse`}>
                {icon || '?'}
              </div>
            </div>
          )}
        </div>
        
        <!-- Content section -->
        <div class={`flex-1 ${variant === 'compact' ? 'p-2' : 'p-3'} flex flex-col justify-center ${variant === 'compact' ? 'gap-1' : 'gap-2'}`} style="background: rgba(10, 15, 25, 0.95)">
          <!-- Title -->
          <div class="text-center mb-1">
            <h3 class={`
              font-['Orbitron'] font-bold uppercase tracking-wider text-terminal-green
              ${variant === 'compact' ? 'text-base leading-tight' : 'text-xl leading-normal'}
            `}>
              {title}
            </h3>
            {role && (
              <p class={`
                text-terminal-cyan/60 font-light
                ${variant === 'compact' ? 'text-[11px] mt-0.5 leading-tight' : 'text-sm mt-1 leading-normal'}
              `}>
                ({role})
              </p>
            )}
          </div>
          
          <!-- Decorative divider -->
          {variant === 'compact' && (
            <div class="card-divider"></div>
          )}
          
          <!-- Description -->
          {description && (
            <p class={`
              text-center text-terminal-green/80 font-mono
              ${variant === 'compact' ? 'text-[11px] leading-snug line-clamp-3 px-1' : 'text-sm leading-relaxed px-2'}
            `}>
              {description}
            </p>
          )}
          
          <!-- MCP Tools -->
          {mcpTools && mcpTools.length > 0 && (
            <div class={`mt-auto ${variant === 'compact' ? 'mcp-tools-compact' : 'block'}`}>
              <div class="flex items-center justify-center gap-2 mb-1">
                <span class="text-terminal-cyan">⚡</span>
                <p class="text-[10px] text-terminal-cyan font-mono font-semibold tracking-wide">MCP TOOLS</p>
                <span class="text-terminal-cyan">⚡</span>
              </div>
              <div class="flex flex-wrap gap-1 justify-center px-2">
                {mcpTools.map((tool) => (
                  <div class="mcp-tool-badge">
                    {tool}
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <!-- Card number -->
          {variant !== 'compact' && (
            <div class="absolute bottom-2 right-2 text-xs font-mono">
              <span class="card-number">
                #{String(Math.floor(Math.random() * 999) + 1).padStart(3, '0')}
              </span>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
)}

<style>
  /* Import font */
  @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');
  
  /* Default and compact card styles */
  .card-container {
    @apply relative w-full h-full;
    @apply border-2 border-terminal-cyan/50 rounded-xl;
    @apply overflow-hidden transition-all duration-300;
    background: linear-gradient(135deg, 
      rgba(20, 30, 40, 0.98),
      rgba(15, 20, 30, 0.99) 40%,
      rgba(20, 15, 35, 0.98),
      rgba(25, 30, 45, 0.98)
    );
    box-shadow: 
      0 0 20px rgba(0, 255, 255, 0.4),
      inset 0 0 20px rgba(0, 255, 255, 0.1);
  }
  
  .card-hover {
    @apply hover:scale-105 hover:shadow-[0_20px_40px_rgba(0,0,0,0.8)] hover:z-50;
  }
  
  .card-compact {
    @apply transition-all duration-300;
  }
  
  .group:hover .card-compact {
    width: 280px !important;
    height: 360px !important;
    transform: translateX(-40px) translateY(-50px);
    z-index: 1000;
  }
  
  /* MCP Tools */
  .mcp-tools-compact {
    @apply hidden;
  }
  
  .group:hover .mcp-tools-compact {
    @apply block;
  }
  
  .mcp-tool-badge {
    @apply bg-black/80 border border-terminal-cyan/50 rounded-xl;
    @apply px-3 py-1 text-[9px] text-white/90 whitespace-nowrap;
  }
  
  .card-number {
    @apply bg-gradient-to-br from-terminal-cyan/40 via-terminal-magenta/40 to-terminal-cyan/40;
    @apply bg-clip-text text-transparent;
  }
  
  /* Tiny card styles */
  .tiny-card {
    @apply inline-flex;
    background: linear-gradient(145deg, 
      rgba(28, 35, 43, 0.9) 0%, 
      rgba(20, 25, 32, 0.9) 100%
    );
    @apply border border-terminal-cyan/30 rounded-lg;
    @apply px-3 py-2;
    box-shadow: 
      inset 0 1px 2px rgba(255, 255, 255, 0.05),
      0 2px 4px rgba(0, 0, 0, 0.4);
    @apply transition-all duration-200 ease-in-out;
  }
  
  .tiny-card:hover {
    @apply -translate-y-0.5;
    box-shadow: 
      inset 0 1px 2px rgba(255, 255, 255, 0.1),
      0 4px 8px rgba(0, 0, 0, 0.6),
      0 0 20px rgba(0, 255, 255, 0.1);
    @apply border-terminal-cyan/50;
  }
  
  .tiny-card-content {
    @apply flex items-center gap-2;
  }
  
  .tiny-card-icon {
    @apply text-xl opacity-80;
  }
  
  .tiny-card-text {
    @apply flex flex-col;
  }
  
  .tiny-card-title {
    @apply text-sm font-semibold text-terminal-green leading-tight;
  }
  
  .tiny-card-role {
    @apply text-[10px] text-terminal-cyan/60 leading-tight mt-0.5;
  }
  
  /* Expand image sections on hover for compact cards */
  .group:hover .card-compact .character-image {
    height: 160px !important;
  }
  
  .group:hover .card-compact .image-section {
    height: 160px !important;
  }
  
  /* Decorative corners */
  .card-corners {
    position: absolute;
    inset: 0;
    pointer-events: none;
    z-index: 10;
  }
  
  .corner-tl,
  .corner-tr {
    position: absolute;
    width: 20px;
    height: 20px;
    border: 1px solid rgba(0, 255, 255, 0.4);
  }
  
  .corner-tl {
    top: 8px;
    left: 8px;
    border-right: none;
    border-bottom: none;
  }
  
  .corner-tr {
    top: 8px;
    right: 8px;
    border-left: none;
    border-bottom: none;
  }
  
  /* Decorative divider */
  .card-divider {
    width: 80%;
    height: 1px;
    margin: 1px auto 2px;
    background: linear-gradient(
      to right,
      transparent,
      rgba(0, 255, 255, 0.4) 10%,
      rgba(0, 255, 255, 0.4) 90%,
      transparent
    );
  }
  
  /* Enhanced hover effect for compact cards */
  .card-compact:hover {
    @apply border-terminal-cyan/80;
    box-shadow: 
      0 0 40px rgba(0, 255, 255, 0.6),
      0 0 80px rgba(0, 255, 255, 0.3),
      inset 0 0 30px rgba(0, 255, 255, 0.2);
  }
</style>