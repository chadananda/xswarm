---
import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';
import readingTime from 'reading-time';

// Get all blog posts, filter out drafts
const posts = (await getCollection('blog'))
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());

// Group posts by tag for the filter
const tags = [...new Set(posts.flatMap(post => post.data.tags || []))];
---

<Layout title="Blog - xSwarm.ai" description="Brutally honest insights on AI development, token economics, and building with swarms of specialized agents.">
  <Navbar />
  
  <main>
    <div class="container mx-auto px-4 max-w-7xl pt-20 pb-8">
      <!-- Tag Filter -->
      {tags.length > 0 && (
        <div class="tag-filters">
          <button 
            data-tag="all"
            class="tag-filter active"
          >
            All Posts
          </button>
          {tags.map((tag) => (
            <button 
              data-tag={tag}
              class="tag-filter"
            >
              {tag}
            </button>
          ))}
        </div>
      )}

      <!-- Blog Posts Grid -->
      <div class="blog-posts-grid">
        {posts.map((post) => {
          const stats = readingTime(post.body);
          const formattedDate = new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          }).format(post.data.publishDate);
          
          return (
            <article 
              class="blog-post-card"
              data-tags={JSON.stringify(post.data.tags || [])}
            >
              {post.data.image && (
                <div class="blog-post-image">
                  <img
                    src={post.data.image}
                    alt={post.data.imageAlt || post.data.title}
                    loading="lazy"
                  />
                </div>
              )}
              
              <div class="blog-post-content">
                <div class="blog-post-meta">
                  <time datetime={post.data.publishDate.toISOString()}>{formattedDate}</time>
                  <span>â€¢</span>
                  <span>{stats.text}</span>
                </div>
                
                <h2 class="blog-post-title">
                  <a href={`/blog/${post.slug}`}>
                    {post.data.title}
                  </a>
                </h2>
                
                <p class="blog-post-description">
                  {post.data.description}
                </p>
                
                {post.data.tags && post.data.tags.length > 0 && (
                  <div class="blog-post-tags">
                    {post.data.tags.map((tag) => (
                      <span class="blog-post-tag">
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                
                <a href={`/blog/${post.slug}`} class="blog-post-link">
                  Read Full Article
                </a>
              </div>
            </article>
          );
        })}
      </div>

      {posts.length === 0 && (
        <div class="blog-empty-state">
          <p>
            No blog posts yet. Check back soon for brutally honest AI insights!
          </p>
        </div>
      )}
    </div>
  </main>
  
  <Footer />
</Layout>

<script>
  // Tag filtering with cyberpunk effects
  const tagButtons = document.querySelectorAll('.tag-filter');
  const blogPosts = document.querySelectorAll('.blog-post-card');

  tagButtons.forEach(button => {
    button.addEventListener('click', () => {
      const selectedTag = button.getAttribute('data-tag');
      
      // Update button states
      tagButtons.forEach(btn => {
        btn.classList.remove('active');
      });
      button.classList.add('active');
      
      // Filter posts with fade effect
      blogPosts.forEach(post => {
        post.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        
        if (selectedTag === 'all') {
          post.style.opacity = '0';
          post.style.transform = 'scale(0.95)';
          setTimeout(() => {
            post.style.display = 'block';
            post.style.opacity = '1';
            post.style.transform = 'scale(1)';
          }, 100);
        } else {
          const postTags = JSON.parse(post.getAttribute('data-tags') || '[]');
          if (postTags.includes(selectedTag)) {
            post.style.opacity = '0';
            post.style.transform = 'scale(0.95)';
            setTimeout(() => {
              post.style.display = 'block';
              post.style.opacity = '1';
              post.style.transform = 'scale(1)';
            }, 100);
          } else {
            post.style.opacity = '0';
            post.style.transform = 'scale(0.95)';
            setTimeout(() => {
              post.style.display = 'none';
            }, 300);
          }
        }
      });
    });
  });
</script>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=JetBrains+Mono:wght@300;400;500;700&display=swap');

  /* Tag Filter Cyberpunk Style */
  .tag-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: flex-start;
    margin-bottom: 1.5rem;
  }

  .tag-filter {
    padding: 0.25rem 0.75rem;
    border-radius: 999px;
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.75rem;
    font-weight: 400;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    color: rgba(0, 212, 255, 0.8);
    cursor: pointer;
  }

  .tag-filter::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(0, 212, 255, 0.2);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.5s ease;
  }

  .tag-filter:hover {
    border-color: #00d4ff;
    color: white;
    text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
  }

  .tag-filter:hover::before {
    width: 100%;
    height: 100%;
  }

  .tag-filter.active {
    background: rgba(0, 212, 255, 0.2);
    border-color: #00d4ff;
    color: white;
    box-shadow: 0 0 20px rgba(0, 212, 255, 0.4);
  }

  /* Blog Post Cards - Masonry Grid */
  .blog-posts-grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-flow: dense;
    grid-auto-rows: auto;
  }

  /* Featured article - slightly larger */
  .blog-post-card:first-child {
    grid-column: span 2;
    grid-row: span 1;
  }

  /* Every 3rd is vertical */
  .blog-post-card:nth-child(3n) {
    grid-column: span 1;
    grid-row: span 1;
  }

  /* Regular cards */
  .blog-post-card {
    grid-column: span 1;
    grid-row: span 1;
  }

  /* Tablet responsiveness */
  @media (max-width: 1024px) {
    .blog-posts-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .blog-posts-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    .blog-post-card:first-child,
    .blog-post-card:nth-child(6n) {
      grid-column: span 2;
    }
  }

  @media (max-width: 480px) {
    .blog-posts-grid {
      grid-template-columns: 1fr;
    }
    .blog-post-card:first-child,
    .blog-post-card:nth-child(4n+2),
    .blog-post-card:nth-child(4n+3),
    .blog-post-card:nth-child(6n) {
      grid-column: span 1;
      grid-row: span 1;
    }
  }

  .blog-post-card {
    background: rgba(26, 26, 46, 0.9);
    border: 1px solid rgba(139, 92, 246, 0.3);
    border-radius: 1rem;
    overflow: hidden;
    transition: all 0.3s ease;
    position: relative;
    display: flex;
    flex-direction: column;
  }

  .blog-post-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, transparent 50%);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .blog-post-card:hover {
    transform: translateY(-4px);
    border-color: rgba(0, 212, 255, 0.6);
    box-shadow: 
      0 10px 30px rgba(0, 0, 0, 0.5),
      0 0 30px rgba(0, 212, 255, 0.2);
  }

  .blog-post-card:hover::before {
    opacity: 1;
  }

  /* Card Image */
  .blog-post-image {
    overflow: hidden;
    position: relative;
    width: 100%;
    height: 120px;
  }

  /* Featured article gets slightly bigger image */
  .blog-post-card:first-child .blog-post-image {
    height: 150px;
  }

  .blog-post-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.3s ease;
  }

  .blog-post-card:hover .blog-post-image img {
    transform: scale(1.05);
  }

  .blog-post-image::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 30%;
    background: linear-gradient(to bottom, transparent, rgba(26, 26, 46, 0.9));
    pointer-events: none;
  }

  /* Card Content */
  .blog-post-content {
    padding: 0.75rem;
  }

  /* Featured article gets more padding */
  .blog-post-card:first-child .blog-post-content {
    padding: 1rem;
  }

  .blog-post-meta {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.75rem;
    color: #00d4ff;
    margin-bottom: 0.5rem;
  }

  .blog-post-meta span {
    color: rgba(255, 255, 255, 0.5);
  }

  .blog-post-title {
    font-family: 'Orbitron', sans-serif;
    font-size: 1.1rem;
    font-weight: 700;
    color: white;
    margin-bottom: 0.5rem;
    line-height: 1.2;
    transition: color 0.3s ease;
  }

  /* Featured article gets bigger title */
  .blog-post-card:first-child .blog-post-title {
    font-size: 1.75rem;
    margin-bottom: 0.75rem;
  }

  /* Small cards get smaller titles */
  .blog-post-card:nth-child(4n+2) .blog-post-title,
  .blog-post-card:nth-child(4n+3) .blog-post-title {
    font-size: 0.95rem;
  }

  .blog-post-title a {
    color: inherit;
    text-decoration: none;
  }

  .blog-post-card:hover .blog-post-title {
    color: #00d4ff;
  }

  .blog-post-description {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.8rem;
    line-height: 1.3;
    margin-bottom: 0.75rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Featured article shows more lines */
  .blog-post-card:first-child .blog-post-description {
    -webkit-line-clamp: 3;
    font-size: 0.875rem;
  }

  /* Tags */
  .blog-post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
    margin-bottom: 0.75rem;
  }

  .blog-post-tag {
    padding: 0.25rem 0.75rem;
    background: rgba(139, 92, 246, 0.2);
    border: 1px solid rgba(139, 92, 246, 0.4);
    border-radius: 999px;
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.75rem;
    color: #8b5cf6;
  }

  /* Read More Link */
  .blog-post-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: #00d4ff;
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.875rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .blog-post-link:hover {
    color: white;
    text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
    gap: 0.75rem;
  }

  .blog-post-link::after {
    content: 'â†’';
    font-size: 1.2em;
    transition: transform 0.3s ease;
  }

  .blog-post-link:hover::after {
    transform: translateX(3px);
  }

  /* Empty State */
  .blog-empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: rgba(255, 255, 255, 0.6);
    font-family: 'JetBrains Mono', monospace;
    font-size: 1.125rem;
  }

  .blog-empty-state p {
    margin: 0;
  }
</style>