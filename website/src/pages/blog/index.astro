---
import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';
import readingTime from 'reading-time';
import '../../styles/blog-index.css';

// Get all blog posts, filter out drafts
const posts = (await getCollection('blog'))
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());

// Group posts by tag for the filter
const tags = [...new Set(posts.flatMap(post => post.data.tags || []))];
---

<Layout title="Blog - XSwarm.ai" description="Brutally honest insights on AI development, token economics, and building with swarms of specialized agents.">
  <Navbar />
  
  <main>
    <div class="container mx-auto px-4 max-w-7xl py-8">
      <!-- Tag Filter -->
      {tags.length > 0 && (
        <div class="tag-filters">
          <button 
            data-tag="all"
            class="tag-filter active"
          >
            All Posts
          </button>
          {tags.map((tag) => (
            <button 
              data-tag={tag}
              class="tag-filter"
            >
              {tag}
            </button>
          ))}
        </div>
      )}

      <!-- Blog Posts Grid -->
      <div class="blog-posts-grid">
        {posts.map((post) => {
          const stats = readingTime(post.body);
          const formattedDate = new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          }).format(post.data.publishDate);
          
          return (
            <article 
              class="blog-post-card"
              data-tags={JSON.stringify(post.data.tags || [])}
            >
              {post.data.image && (
                <div class="blog-post-image">
                  <img
                    src={post.data.image}
                    alt={post.data.imageAlt || post.data.title}
                    loading="lazy"
                  />
                </div>
              )}
              
              <div class="blog-post-content">
                <div class="blog-post-meta">
                  <time datetime={post.data.publishDate.toISOString()}>{formattedDate}</time>
                  <span>â€¢</span>
                  <span>{stats.text}</span>
                </div>
                
                <h2 class="blog-post-title">
                  <a href={`/blog/${post.slug}`}>
                    {post.data.title}
                  </a>
                </h2>
                
                <p class="blog-post-description">
                  {post.data.description}
                </p>
                
                {post.data.tags && post.data.tags.length > 0 && (
                  <div class="blog-post-tags">
                    {post.data.tags.map((tag) => (
                      <span class="blog-post-tag">
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                
                <a href={`/blog/${post.slug}`} class="blog-post-link">
                  Read Full Article
                </a>
              </div>
            </article>
          );
        })}
      </div>

      {posts.length === 0 && (
        <div class="blog-empty-state">
          <p>
            No blog posts yet. Check back soon for brutally honest AI insights!
          </p>
        </div>
      )}
    </div>
  </main>
  
  <Footer />
</Layout>

<script>
  // Tag filtering with cyberpunk effects
  const tagButtons = document.querySelectorAll('.tag-filter');
  const blogPosts = document.querySelectorAll('.blog-post-card');

  tagButtons.forEach(button => {
    button.addEventListener('click', () => {
      const selectedTag = button.getAttribute('data-tag');
      
      // Update button states
      tagButtons.forEach(btn => {
        btn.classList.remove('active');
      });
      button.classList.add('active');
      
      // Filter posts with fade effect
      blogPosts.forEach(post => {
        post.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        
        if (selectedTag === 'all') {
          post.style.opacity = '0';
          post.style.transform = 'scale(0.95)';
          setTimeout(() => {
            post.style.display = 'block';
            post.style.opacity = '1';
            post.style.transform = 'scale(1)';
          }, 100);
        } else {
          const postTags = JSON.parse(post.getAttribute('data-tags') || '[]');
          if (postTags.includes(selectedTag)) {
            post.style.opacity = '0';
            post.style.transform = 'scale(0.95)';
            setTimeout(() => {
              post.style.display = 'block';
              post.style.opacity = '1';
              post.style.transform = 'scale(1)';
            }, 100);
          } else {
            post.style.opacity = '0';
            post.style.transform = 'scale(0.95)';
            setTimeout(() => {
              post.style.display = 'none';
            }, 300);
          }
        }
      });
    });
  });
</script>